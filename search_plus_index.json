{"./":{"url":"./","title":"Introduction","keywords":"","body":" 基于gitbook的电子书，部署在github和gitee上 python学习笔记记录了关于python基本的使用，以及其他的一些进阶使用 &#x1F40D; python学习笔记 &#x1F40D; python学习笔记gitee java学习笔记记录了关于java基本的使用，以及一些框架的使用方法 &#x1F42C; java学习笔记 &#x1F42C; java学习笔记gitee 机器学习笔记 &#x1F34F; 机器学习学习笔记 &#x1F34F; 机器学习学习笔记gitee 英语学习笔记记录了英语的主要常用的语法点知识，包括各类从句和词性的解析理解 &#x1F353; 英语学习笔记 &#x1F40D; python学习笔记 &#x1F42C; java学习笔记 &#x1F37C; 机器学习学习笔记 &#x1F40D; python学习笔记 &#x1F42C; java学习笔记 &#x1F37C; 机器学习学习笔记 Copyright © narutohyc.com 2021 all right reserved，powered by Gitbook该文件修订时间： 2023-09-07 09:09:57 new Valine({el: \"#vcomments\",appId: 'evyLlP61gQN3G3OM2GQq1rzH-gzGzoHsz',appKey: 'utUrzoiqNaDEGlgr09JL1pXB',placeholder: '欢迎留下评论交流~',avatar: 'wavatar',meta: undefined,pageSize: 15,lang: 'zh-CN',recordIP: false}) "},"chapters/8.Kafka基本安装和使用.html":{"url":"chapters/8.Kafka基本安装和使用.html","title":"Kafka基本安装和使用","keywords":"","body":"Kafka简介基本概念Kafka安装和测试下载配置zookeeper.propertiesserver.properties启动测试另一套方案其他问题 Kafka简介 kafka官网下载 基本概念 Kafka安装和测试 下载 kafka_2.12-2.8.0下载 配置 zookeeper.properties # the directory where the snapshot is stored. dataDir=/home/huangyc/kafka_2.12-2.8.0/zk_logs # the port at which the clients will connect clientPort=2183 server.properties # The address the socket server listens on. It will get the value returned from # java.net.InetAddress.getCanonicalHostName() if not configured. # FORMAT: # listeners = listener_name://host_name:port # EXAMPLE: # listeners = PLAINTEXT://your.host.name:9092 listeners=PLAINTEXT://:9092 # Zookeeper connection string (see zookeeper docs for details). # This is a comma separated host:port pairs, each corresponding to a zk # server. e.g. \"127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002\". # You can also append an optional chroot string to the urls to specify the # root directory for all kafka znodes. zookeeper.connect=localhost:2183 # A comma separated list of directories under which to store log files log.dirs=/home/huangyc/kafka_2.12-2.8.0/kafka_logs 启动 启动zookeeper ./bin/zookeeper-server-start.sh ./config/zookeeper.properties 启动kafka ./bin/kafka-server-start.sh ./config/server.properties 查看Kafka进程 [root@Hmaster kafka_2.12-2.8.0]# jps | grep Kafka 23425 Kafka 测试 查看主题列表 bin/kafka-topics.sh --zookeeper localhost:2183 --list 消息生产者 bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test 消息消费者 bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning 0.9以前版本: kafka-console-consumer.bat --zookeeper localhost:2183 --topic test --from-beginning 另一套方案 server.properties # The address the socket server listens on. It will get the value returned from # java.net.InetAddress.getCanonicalHostName() if not configured. # FORMAT: # listeners = listener_name://host_name:port # EXAMPLE: # listeners = PLAINTEXT://your.host.name:9092 listeners=PLAINTEXT://:9092 # Hostname and port the broker will advertise to producers and consumers. If not set, # it uses the value for \"listeners\" if configured. Otherwise, it will use the value # returned from java.net.InetAddress.getCanonicalHostName(). advertised.listeners=PLAINTEXT://192.168.123.21:9092 # A comma separated list of directories under which to store log files log.dirs=/home/huangyc/kafka_2.12-2.8.0/kafka_logs # Zookeeper connection string (see zookeeper docs for details). # This is a comma separated host:port pairs, each corresponding to a zk # server. e.g. \"127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002\". # You can also append an optional chroot string to the urls to specify the # root directory for all kafka znodes. zookeeper.connect=localhost:2183 消息生产者 bin/kafka-console-producer.sh --broker-list localhost:9092 --topiest 消息消费者 bin/kafka-console-consumer.sh --bootstrap-server 192.168.123.21:9092 其他问题 win10访问 需要配置host C:\\Windows\\System32\\drivers\\etc\\hosts 192.168.123.21 Hmaster # 查看 hostname [root@Hmaster ~]# hostnamectl Static hostname: Hmaster Icon name: computer-desktop Chassis: desktop Machine ID: 87af5eaaaf7c48f6b1cd9f42bfb51c76 Boot ID: 9fe58388f3274f0e838b7cd1b720eacd Operating System: CentOS Linux 7 (Core) CPE OS Name: cpe:/o:centos:centos:7 Kernel: Linux 3.10.0-1160.el7.x86_64 Architecture: x86-64 防火墙开启 systemctl start firewalld 端口开启 firewall-cmd --zone=public --add-port=9092/tcp --permanent 生效 firewall-cmd --reload Copyright © narutohyc.com 2021 all right reserved，powered by Gitbook该文件修订时间： 2023-09-07 09:09:57 new Valine({el: \"#vcomments\",appId: 'evyLlP61gQN3G3OM2GQq1rzH-gzGzoHsz',appKey: 'utUrzoiqNaDEGlgr09JL1pXB',placeholder: '欢迎留下评论交流~',avatar: 'wavatar',meta: undefined,pageSize: 15,lang: 'zh-CN',recordIP: false}) "},"chapters/3.Linux常用命令.html":{"url":"chapters/3.Linux常用命令.html","title":"Linux常用命令","keywords":"","body":"linux常用指令文件类磁盘类防火墙端口类win端口进程类批量杀死进程解压缩日期时间环境变量后台执行svn基本使用系统级代理配置包管理 linux常用指令 linux指令入门 文件类 远程拷贝文件(-P 是指定端口，-r 是循环复制) scp -P port -r root@192.168.2.1:/home/hyc/test /home/hyc/ 文件权限 删除文件 删除文件夹 移动或更名 查找搜索: 寻找特定档案：find、locate、whereis 按照文件名搜索 # 语法: find 搜索路径 [选项] 搜索内容 find / -name label_studio.sqlite3 选项： -name: 按照文件名搜索 -iname: 按照文件名搜索，不区分文件名大小 -inum: 按照 inode 号搜索 按照文件类型搜索 # 语法: find 搜索路径 [选项] 搜索内容 find /home -type d -name huangyc 选项: -type d：查找目录 -type f：查找普通文件 -type l：查找软链接文件 寻找【执行挡】：which 查看文件夹及子目录下文件数量 [root@uslave02 datasets]# ls -lR /home/hyc/ | grep -E \".jpg|.png|.jpeg|.jpe\" |wc -l 6599 磁盘类 查看某个文件或目录占用磁盘空间的大小(需要进入到当前目录) du -ah --max-depth=1 查看全局文件系统磁盘占用 df -h 查看当前路径下 各文件夹的磁盘占用 du -sh * 防火墙 端口类 防火墙 # 重启防火墙 firewall-cmd --reload # 关闭端口（关闭后需要要重启防火墙才生效） firewall-cmd --zone=public --remove-port=3338/tcp --permanent # 开机启动防火墙 systemctl enable firewalld # 开启防火墙 systemctl start firewalld # 查看防火墙状态 firewall-cmd --state # 禁止防火墙开机启动 systemctl disable firewalld # 停止防火墙 systemctl stop firewalld 查看端口占用 # 查看已开放的端口 firewall-cmd --list-ports # 或 # yum install net-tools netstat -atunlp 开启端口 # 开放端口（开放后需要要重启防火墙才生效） firewall-cmd --zone=public --add-port=3338/tcp --permanent # 配置立即生效 firewall-cmd --reload win端口 拓展下windows下的端口查找和kill操作 C:\\Users\\Administrator>netstat -aon | findstr \"4000\" TCP 0.0.0.0:4000 0.0.0.0:0 LISTENING 12128 TCP 127.0.0.1:4000 127.0.0.1:57174 TIME_WAIT 0 TCP 127.0.0.1:4000 127.0.0.1:57175 TIME_WAIT 0 TCP [::]:4000 [::]:0 LISTENING 12128 C:\\Users\\Administrator>tasklist|findstr \"12128\" node.exe 12128 Console 3 141,152 K C:\\Users\\Administrator>taskkill /T /F /PID 12128 成功: 已终止 PID 12128 (属于 PID 24224 子进程)的进程。 进程类 杀死指定进程 批量杀死进程 查看进程号 [root@iZ2zeh6nc313zs4azjijjnZ ~]# ps -ef | grep gitbook | grep -v grep|awk '{print $2}' 24064 29387 30425 方式一：batch_shell #!/bin/sh dsp_admin_id=`ps -ef | grep gitbook | grep -v grep|awk '{print $2}'` echo $dsp_admin_id for id in $dsp_admin_id do kill -9 $id echo \"killed $id\" done 方式二：单行执行 #!/bin/sh ps -ef | grep gitbook | grep -v grep|grep 4000| awk '{print $2}' | xargs kill -9 解压缩 压缩 tar -cvf jpg.tar *.jpg //将目录里所有jpg文件打包成jpg.tar tar -czf jpg.tar.gz *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩 rar a jpg.rar *.jpg //rar格式的压缩，需要先下载rar for linux zip jpg.zip *.jpg //zip格式的压缩，需要先下载zip for linux 解压缩 tar -xvf file.tar -C DestPath 1.txt //解压 tar包 1.txt表示只需要解压出这个文件,默认解压所有 tar -xzvf file.tar.gz //解压tar.gz tar -xjvf file.tar.bz2 //解压 tar.bz2 tar -xZvf file.tar.Z //解压tar.Z unrar e file.rar DestPath //解压rar unzip file.zip //解压zip 日期时间 显示日期 [root@iZ2zeh6nc313zs4azjijjnZ ~]# date 2022年 03月 12日 星期六 10:57:52 CST 显示日历 [root@iZ2zeh6nc313zs4azjijjnZ ~]# cal 三月 2022 日 一 二 三 四 五 六 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 环境变量 在CentOS操作系统中，您可以使用几种方式来设置环境变量。以下是其中一些常见的方法： /etc/profile文件 通过/etc/profile文件：在CentOS中，可以编辑/etc/profile文件来设置系统范围的环境变量。打开该文件并在文件末尾添加您想要设置的环境变量，例如： export MY_VARIABLE=/path/to/my/directory 保存文件后，重新登录或运行source /etc/profile以使更改生效 ~/.bash_profile或~/.bashrc 通过~/.bash_profile或~/.bashrc文件：每个用户可以在其主目录中的.bash_profile或.bashrc文件中设置个人环境变量。这些文件会在用户登录时自动加载。打开其中一个文件，并在文件末尾添加类似的行： export MY_VARIABLE=/path/to/my/directory 保存文件后，注销并重新登录，或者使用命令source ~/.bash_profile（或source ~/.bashrc）来加载更改 /etc/environment文件 通过/etc/environment文件：可以编辑/etc/environment文件来设置系统范围的全局环境变量。该文件包含逐行的\"key=value\"对。例如： MY_VARIABLE=/path/to/my/directory 保存文件后，重新登录或重启系统以使更改生效 命令行临时设置 可以在命令行中临时设置环境变量，仅对当前会话有效。使用以下语法： export MY_VARIABLE=/path/to/my/directory 这将在当前会话中设置环境变量，但在注销或重新启动后不会保留 请注意，设置环境变量后，您可能需要重新启动相关应用程序或终端窗口，以便它们能够读取新的环境变量值 后台执行 cloudreve私有云盘配置后台运行 systemctl方式 vi /usr/lib/systemd/system/cloudreve.service # 输入以下内容，注意最好别带中文 [Unit] Description=Cloudreve Documentation=https://docs.cloudreve.org After=network.target Wants=network.target [Service] Type=simple WorkingDirectory=/home/software/cloudreve ExecStart=/home/software/cloudreve/cloudreve Restart=on-abnormal RestartSec=5s KillMode=mixed StandardOutput=null StandardError=syslog [Install] WantedBy=multi-user.target 更新重启服务 # 更新配置 systemctl daemon-reload # 启动服务 systemctl start cloudreve # 设置开机启动 systemctl enable cloudreve 管理命令 # 启动服务 systemctl start cloudreve # 停止服务 systemctl stop cloudreve # 重启服务 systemctl restart cloudreve # 查看状态 systemctl status cloudreve nohup方式 nohup python run.pt > log.log & svn基本使用 centos安装svn客户端 # 安装svn客户端 yum install mod_dav_svn # 查看当前svn的版本 svnserve --version 拉取项目(已存在) svn checkout svn://10.10.13.13 提交上传文件 svn add svn commit -m \"提交说明\" 如果要提交整个目录下的所有文件，可以将 替换为目录的路径 更新文件 checkout只在第一次链接时使用一次，以后如果进行更新操作请使用update指令 系统级 版本信息 [root@iZ2zeh6nc313zs4azjijjnZ ~]# uname -r 3.10.0-1062.12.1.el7.x86_64 [root@iZ2zeh6nc313zs4azjijjnZ ~]# lsb_release -a LSB Version: :core-4.1-amd64:core-4.1-noarch Distributor ID: CentOS Description: CentOS Linux release 7.7.1908 (Core) Release: 7.7.1908 Codename: Core 软链接 ln是linux中又一个非常重要命令，它的功能是为某一个文件在另外一个位置建立一个同步的链接 当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件 我们只要在某个固定的目录，放上该文件，然后在 其它的目录下用ln命令链接(link)它就可以，不必重复的占用磁盘空间 这个命令最常用的参数是-s,具体用法是：ln -s 源文件 目标文件 报错例子 ImportError: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.21' not found (required by /home/anaconda/install/envs/stk37/lib/python3.7/site-packages/pandas/_libs/window/aggregations.cpython-37m-x86_64-linux-gnu.so) 解决方案 # 查找lib库 sudo find / -name \"libstdc++.so.6*\" # 从上述列表里找一个路径，查看是否存在我们需要的'GLIBCXX_3.4.21' strings /home/anaconda/lib/x86_64-conda_cos6-linux-gnu/sysroot/lib/libstdc++.so.6 |grep GLIBCXX_3.4.21 # 如果存在的话，建立软链接到我们需要的地方，这里例子里是/lib64/libstdc++.so.6 ln -s /home/anaconda/lib/x86_64-conda_cos6-linux-gnu/sysroot/lib/libstdc++.so.6 /lib64/libstdc++.so.6 # 注意如果/lib64/libstdc++.so.6 已经存在，此时上述命令会报错，需要先备份后删除，再执行ln，(但是里面没有我们需要的'GLIBCXX_3.4.21'，可以用strings查看) cp /lib64/libstdc++.so.6 /lib64/libstdc++.so.6_bak rm /lib64/libstdc++.so.6 ln -s /home/anaconda/lib/x86_64-conda_cos6-linux-gnu/sysroot/lib/libstdc++.so.6 /lib64/libstdc++.so.6 # 至此完成软链接配置 代理配置 修改配置文件/etc/profile，即可配置centos通过代理进行上网 # 编辑配置文件 vi /etc/profile # 添加代理服务器ip地址和端口号 export http_proxy=http://192.168.xx.xx:port export https_proxy=http://192.168.xx.xx:port export ftp_proxy=$http_proxy # 使配置文件生效 source /etc/profile 在/etc/yum.conf后面添加以下内容 # 编辑配置文件 vi /etc/yum.conf proxy=http://127.0.0.1:8080 # 使配置文件生效 source /etc/yum.conf 编辑配置文件/etc/wgetrc添加下面两行 # 编辑配置文件 vi /etc/wgetrc http_proxy=http://127.0.0.1:8080 https_proxy=http://127.0.0.1:8080 # 使配置文件生效 source /etc/wgetrc 包管理 安装 RPM 包 sudo rpm -ivh --prefix= --prefix为可选项，用于指定安装路径。如不设置，系统会将安装到默认路径 Copyright © narutohyc.com 2021 all right reserved，powered by Gitbook该文件修订时间： 2023-09-07 09:09:57 new Valine({el: \"#vcomments\",appId: 'evyLlP61gQN3G3OM2GQq1rzH-gzGzoHsz',appKey: 'utUrzoiqNaDEGlgr09JL1pXB',placeholder: '欢迎留下评论交流~',avatar: 'wavatar',meta: undefined,pageSize: 15,lang: 'zh-CN',recordIP: false}) "},"chapters/1.alicloud_deployment.html":{"url":"chapters/1.alicloud_deployment.html","title":"alicloud_deployment","keywords":"","body":"阿里云部署环境安装安装git、jdk和nodejsgit访问慢配置常用命令批量杀死进程 阿里云部署 阿里云部署笔记(centos版本)，购买阿里云主机，开启安全组 云主机实例 配置安全组 环境安装 安装git、jdk和nodejs 安装jdk # 安装jdk rpm -ivh jdk-8u241-linux-x64.rpm 配置jdk环境变量vi /etc/profile export JAVA_HOME=/usr/java/jdk1.8.0_241-amd64 export JRE_HOME=/usr/java/jdk1.8.0_241-amd64/jre export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin export CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JRE_HOME/lib ps: 若原先存在openjdk，需要先卸载 # 查看jdk列表 rpm -qa|grep java # 卸载 rpm -e --nodeps java-1.8.0-openjdk-1.8.0.181-7.b13.el7.x86_64 安装和配置nodejs # 安装和配置nodejs cp node-v12.16.1-linux-x64.tar.xz /usr/local/ cd /usr/local/ tar -xvf node-v12.16.1-linux-x64.tar.xz mv node-v12.16.1-linux-x64/ nodejs cd nodejs mkdir node_global mkdir node_cache npm config set prefix \"/usr/local/nodejs/node_global\" npm config set cache \"/usr/local/nodejs/node_cache\" # 配置nodejs vim /etc/profile # 在末尾添加 export PATH=$PATH:/usr/local/nodejs/bin # config nodejs # 执行生效命令 source /etc/profile 安装和配置git # 安装和配置git yum install git git config --global user.name \"yourname\" git config --global user.mail \"xxxxxxxxxx@mail.com\" # 配置远程仓库 将pub_key黏贴到git ssh-keygen -t rsa -C \"xxxxxxxxxx@mail.com\" 安装和配置git # 安装和配置git yum install git git config --global user.name \"narutohyc\" git config --global user.mail \"1832044043@qq.com\" # 配置远程仓库 将pub_key黏贴到git ssh-keygen -t rsa -C \"1832044043@qq.com\" 安装gitbook # 安装gitbook npm install gitbook-cli -g # 添加gitbook软链接 ln -s /usr/local/nodejs/node_global/bin/gitbook /usr/bin/gitbook # gitbook指令测试 gitbook -V git访问慢配置 Github下载速度太慢怎么办？完美解决 服务器查询 github hosts下载, 实时更新 通过修改 hosts文件，重定向网站的访问到代理服务器上 | 系统 | hosts文件路径 | | :-------------- | :-------------------------------------------- | | Window | %systemroot%\\system32\\drivers\\etc\\hosts | | Mac / Linux | /etc/hosts | # github 219.76.4.4 github-cloud.s3.amazonaws.com 140.82.113.4 github.com 151.101.185.194 github.global.ssl.fastly.net 刷新DNS缓存，Linux/Mac/Windows-刷新DNS的方法 centos: 方式一: /etc/rc.d/init.d/nscd restart 方式二: yum install -y nscd systemctl restart nscd windows: ipconfig /flushdns 常用命令 netstat -atunlp查看端口占用 杀死指定进程 gitbook指定端口并后台执行 # 指定端口为4001，并放在后台执行 setsid gitbook serve --lrport=35729 --port=4001 若启动gitbook报错 Starting server ... Serving book on http://localhost:4000 Error: ENOSPC: System limit for number of file watchers reached, watch '/home/hyc/github/bk_python/node_modules/entities/mathjax/jax/output/HTML-CSS/fonts/Neo-Euler/Symbols' 则执行以下命令即可 echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p sudo sysctl --system 批量杀死进程 查看进程号 [root@iZ2zeh6nc313zs4azjijjnZ ~]# ps -ef | grep gitbook | grep -v grep|awk '{print $2}' 24064 29387 30425 方式一：batch_shell #!/bin/sh dsp_admin_id=`ps -ef | grep gitbook | grep -v grep|awk '{print $2}'` echo $dsp_admin_id for id in $dsp_admin_id do kill -9 $id echo \"killed $id\" done 方式二：单行执行 #!/bin/sh ps -ef | grep gitbook | grep -v grep|grep 4000| awk '{print $2}' | xargs kill -9 Copyright © narutohyc.com 2021 all right reserved，powered by Gitbook该文件修订时间： 2023-09-07 09:09:57 new Valine({el: \"#vcomments\",appId: 'evyLlP61gQN3G3OM2GQq1rzH-gzGzoHsz',appKey: 'utUrzoiqNaDEGlgr09JL1pXB',placeholder: '欢迎留下评论交流~',avatar: 'wavatar',meta: undefined,pageSize: 15,lang: 'zh-CN',recordIP: false}) "},"chapters/6.docker使用.html":{"url":"chapters/6.docker使用.html","title":"docker使用","keywords":"","body":"dockerdocker是什么docker安装基本命令学习目录挂载多容器通信虚拟网络Docker-Composehello worlddockfile发布和部署示例实战neo4j安装neo4j图算法插件启动neo4jpy库实战nebula基本介绍环境搭建命令学习客户端图模式可视化集群监控数据导入k8s简介安装和部署 docker docker官方文档 Docker 快速入门 docker是什么 Docker 是一个应用打包、分发、部署的工具 你也可以把它理解为一个轻量的虚拟机，它只虚拟你软件需要的运行环境，多余的一点都不要 而普通虚拟机则是一个完整而庞大的系统，包含各种不管你要不要的软件 跟普通虚拟机的对比 特性 普通虚拟机 Docker 跨平台 通常只能在桌面级系统运行，例如 Windows/Mac，无法在不带图形界面的服务器上运行 支持的系统非常多，各类 windows 和 Linux 都支持 性能 性能损耗大，内存占用高，因为是把整个完整系统都虚拟出来了 性能好，只虚拟软件所需运行环境，最大化减少没用的配置 自动化 需要手动安装所有东西 一个命令就可以自动部署好所需环境 稳定性 稳定性不高，不同系统差异大 稳定性好，不同系统都一样部署方式 打包、分发、部署 打包：就是把你软件运行所需的依赖、第三方库、软件打包到一起，变成一个安装包 分发：你可以把你打包好的“安装包”上传到一个镜像仓库，其他人可以非常方便的获取和安装 部署：拿着“安装包”就可以一个命令运行起来你的应用，自动模拟出一摸一样的运行环境，不管是在 Windows/Mac/Linux docker安装 docker容器 = 镜像 + 可读层 容器是由镜像实例化而来，简单来说，镜像是文件，容器是进程 容器是基于镜像创建的，即容器中的进程依赖于镜像中的文件 docker 的镜像概念类似虚拟机的镜像。是一个只读的模板，一个独立的文件系统，包括运行容器所需的数据，可以用来创建新的容器 镜像运行起来就是容器，容器服务运行的过程中，基于原始镜像做了改变，比如安装了程序，添加了文件，也可以提交回去 (commit)成为镜像 docker安装分为安装包和命令行两种 下载docker安装包，按照指示安装即可 windows需要打开启用或关闭Windows功能下的Hyper-V、容器和适用于Linux的Windows子系统选项 安装完要打开Docker Desktop软件，打开会启动引擎，这样才能使用docker 重要：打开Docker Desktop软件，打开Settings下的Resources，选择Advanced下的Disk image location，选择合适的文件夹存放docker的镜像和容器，注意后期容器多的话，这个文件夹很占空间的 curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun 配置镜像加速 进入阿里云，登陆后点击左侧的镜像加速，生成自己的镜像加速地址 执行阿里云推荐的终端命令，即可更新docker的镜像源为阿里云镜像 sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json 代理配置 为docker服务创建一个内嵌的systemd目录 mkdir -p /etc/systemd/system/docker.service.d 创建/etc/systemd/system/docker.service.d/http-proxy.conf文件，并添加HTTP_PROXY环境变量，其中[proxy-addr]和[proxy-port]分别改成实际情况的代理地址和端口 [Service] Environment=\"HTTP_PROXY=http://192.168.4.xx:xx\" \"HTTPS_PROXY=http://192.168.4.xx:xx\" 如果还有内部的不需要使用代理来访问的Docker registries，那么还需要制定NO_PROXY环境变量 [Service] Environment=\"HTTP_PROXY=http://192.168.4.xx:xx\" \"HTTPS_PROXY=http://192.168.4.xx:xx\" \"NO_PROXY=localhost,127.0.0.1,docker-registry.somecorporation.com\" 更新配置并重启Docker服务 systemctl daemon-reload systemctl restart docker 加速格式：\"registry-mirrors\": [\"https://registry.docker-cn.com\"] 镜像加速器 镜像加速器地址 Docker 中国官方镜像 https://registry.docker-cn.com DaoCloud 镜像站 http://f1361db2.m.daocloud.io Azure 中国镜像 https://dockerhub.azk8s.cn 科大镜像站 https://docker.mirrors.ustc.edu.cn 阿里云 https://ud6340vz.mirror.aliyuncs.com 七牛云 https://reg-mirror.qiniu.com 网易云 https://hub-mirror.c.163.com 腾讯云 https://mirror.ccs.tencentyun.com 基本命令学习 基本命令 # 查看版本号 docker version # 启动docker systemctl start docker # 关闭docker systemctl stop docker # 重启docker systemctl restart docker # docker设置随服务启动而自启动 systemctl enable docker # 查看docker 运行状态 systemctl status docker # 查看volume列表 docker volume ls # 查看网络列表 docker network ls 镜像 Docker默认拉取的架构是与主机的架构相同，当你在一个特定的架构上运行Docker命令时，Docker将自动尝试拉取与该架构匹配的镜像。例如，如果你在x86架构的主机上运行Docker命令，Docker将尝试拉取x86架构的镜像 这意味着Docker会自动适配主机的架构，并拉取相应的镜像供使用。如果需要指定架构，可以加上--platform=arm64参数 # 查看本地镜像 docker images # 搜索镜像 docker search neo4j # 拉取镜像 如果需要指定架构，可以加上`--platform=arm64`参数 docker pull 镜像名:tag # 删除镜像 ------当前镜像没有被任何容器使用才可以删除 docker rmi -f 镜像名/镜像ID # 删除多个 其镜像ID或镜像用用空格隔开即可 docker rmi -f 镜像名/镜像ID 镜像名/镜像ID # 保存镜像，将我们的镜像保存为tar压缩文件，这样方便镜像转移和保存 # 然后可以在任何一台安装了docker的服务器上加载这个镜像 docker save 镜像名/镜像ID -o 镜像保存在哪个位置与名字 docker save -o my_ubuntu_v3.tar runoob/ubuntu:v3 # 加载镜像 docker load --input my_ubuntu_v3.tar # 镜像重命名 docker tag : 容器 # 创建一个全新的容器，不会立即运行 docker create --name my_container nginx:latest # 创建和启动的组合，创建了一个新容器并立即启动它，-d表示后台 docker run --name my_container -d nginx:latest # 启动已终止容器 docker container start # 停止容器 docker stop 容器ID或者容器名 # 重启容器 docker restart 容器ID或者容器名 # 列出所有在运行的容器信息 docker ps # 查看本地所有容器 docker ps -a # 删除指定容器 docker rm -f # 删除未启动成功的容器 docker rm $(docker ps -a|grep Created|awk '{print $1}') # 删除所有未运行的容器 docker rm $(docker ps -a|grep Created|awk '{print $1}') # 容器重命名 docker rename CONTAINER NEW_NAME 镜像打包工具 Buildpacks、Dockerfile Docker, Dockerfile, 和Docker Compose区别 | Baeldung Docker Compose允许我们定义容器共享的共同对象。例如，我们可以一次性定义一个卷，然后把它挂在每个容器里，这样它们就可以共享一个共同的文件系统。或者，我们可以定义一个或多个容器用来通信的网络。 Docker Compose只是一个协调多个容器的工具。其他选择包括Kubernetes、Openshift和Apache Mesos Docker容器迁移到其他服务器的5种方法详解_docker 目录挂载 使用 Docker 运行后，我们改了项目代码不会立刻生效，需要重新build和run，很是麻烦 容器里面产生的数据，例如 log 文件，数据库备份文件，容器删除后就丢失了 目录挂载解决以上问题 bind mount 直接把宿主机目录映射到容器内，适合挂代码目录和配置文件。可挂到多个容器上 volume 由容器创建和管理，创建在宿主机，所以删除容器不会丢失，官方推荐，更高效，Linux 文件系统，适合存储数据库数据。可挂到多个容器上 tmpfs mount 适合存储临时文件，存宿主机内存中。不可多容器共享 演示 # bind mount 方式 docker run -p 8080:8080 --name test-hello -v D:/code:/app -d test:v1 # volume 方式 docker run -p 8080:8080 --name test-hello -v db-data:/app -d test:v1 多容器通信 虚拟网络 要想多容器之间互通，从 Web 容器访问 Redis 容器，我们只需要把他们放到同个网络中就可以了 创建一个名为test-net的网络： docker network create test-net 运行 Redis 在 test-net 网络中，别名redis # network-alias指的是网络的别名 docker run -d --name redis --network redis-net --network-alias redis redis:latest 使用时url填写redis：//redis:6379 运行 Web 项目，使用同个网络 docker run -p 8080:8080 --name test -v D:/test:/app --network redis-net -d test:v0 Docker-Compose 假设运行了两个容器：Web 项目 + Redis 如果项目依赖更多的第三方软件，我们需要管理的容器就更加多，每个都要单独配置运行，指定网络 我们可以使用 docker-compose 把项目的多个服务集合到一起，一键运行 安装 Docker Compose 如果你是安装的桌面版 Docker，不需要额外安装，已经包含了 如果是没图形界面的服务器版 Docker，你需要单独安装 安装文档 运行docker-compose检查是否安装成功 编写脚本 要把项目依赖的多个服务集合到一起，我们需要编写一个docker-compose.yml文件，描述依赖哪些服务 容器默认时间不是北京时间，增加 TZ=Asia/Shanghai 可以改为北京时间 version: \"3.7\" services: app: build: ./ # 或者直接使用镜像 image: narutohyc/ubuntu:v0 ports: - 80:8080 volumes: - ./:/app environment: - TZ=Asia/Shanghai redis: image: redis:5.0.13 volumes: - redis:/data environment: - TZ=Asia/Shanghai volumes: redis: 在docker-compose.yml 文件所在目录，执行：docker-compose up就可以跑起来了，文档在这 在后台运行只需要加一个 -d 参数docker-compose up -d 动作 命令 查看运行状态 docker-compose ps 停止运行 docker-compose stop 重启 docker-compose restart 重启单个服务 docker-compose restart service-name 进入容器命令行 docker-compose exec service-name sh 查看容器运行log docker-compose logs [service-name] hello world 创建dockfile，新建一个Dockerfile文件 # 使用基础镜像，选择适合您的环境 FROM ubuntu:20.04 # 安装依赖库和工具 RUN apt update RUN apt-get install -y wget # 设置工作目录 WORKDIR /app 构建镜像，在Dockerfile目录下，执行以下命令，-t后面跟的是镜像名和版本，这里会构建一个fastchat镜像，版本号为v0， docker build -t fastchat:v0 . 如果出现网络问题，需要配置代理，可以带上--build-arg参数 docker build -t fastchat:v0 --build-arg http_proxy=http://192.168.0.xx:xx --build-arg https_proxy=http://192.168.0.xx:xx . 如果需要指定dockfile文件，可以使用-f参数 docker build -f Q:\\pyCharmWS\\chatgpts\\dockfiles\\Dockerfile-ubuntu -t ubuntu:v0 . 除了自己写dockfile，还可以使用docker pull拉取现成的镜像 查看镜像列表 docker images REPOSITORY TAG IMAGE ID CREATED SIZE fastchat v0 20ee81939779 20 seconds ago 115MB 启动镜像 docker run -itd -p 8080:80 --name ubuntu-test fastchat:v0 >>> 918a3b2ccc42436e01c5033021ba97d5bd4c56df48b2c549bf01855d9979333c docker run -itd表示在后台运行容器，并允许与容器进行交互，同时为容器分配一个伪终端 将容器的80端口映射到主机的8080端口 --name ubuntu-test用于指定容器的名称为`ubuntu-test，返回一个容器id 如果已执行就退出'Exit(0)'，可以加上参数--entrypoint=/bin/bash，这里会自动退出是因为Docker容器后台运行，就必须有一个前台进程。容器运行的命令如果不是那些一直挂起的命令(比如运行top，tail)就是会自动退出的 查看容器列表 docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 918a3b2ccc42 fastchat:v0 \"/bin/bash\" 20 seconds ago Up 19 seconds ubuntu-test CONTAINER ID指的是容器ID 进入容器 docker exec -it ubuntu-test bash 输入exit退出，container是不会被关闭的 docker attach ubuntu-test 使用快捷键退出：按下键盘上的Ctrl + P，然后按下Ctrl + Q，container是不会被关闭的 或者输入exit退出，container是会被关闭的 这个组合键可以分离终端与容器的连接，但不会停止容器的运行，将返回到宿主机的终端，而容器会继续在后台运行 停止容器 docker stop ubuntu-test 当您执行docker stop命令停止容器后，容器的名称可能仍然保留在Docker中。如果您尝试使用相同的容器名称再次运行容器，会出现\"重名\"的错误 Q:\\pyCharmWS\\chatgpts\\dockfiles>docker run -itd --name ubuntu-test fastchat:v0 docker: Error response from daemon: Conflict. The container name \"/ubuntu-test\" is already in use by container \"918a3b2ccc42436e01c5033021ba97d5bd4c56df48b2c549bf01855d9979333c\". You have to remove (or rename) that container to be able to reuse that name. See 'docker run --help'. 这是因为Docker要求容器名称在给定的命名空间中必须是唯一的。当您停止容器时，该容器的名称不会立即从Docker中删除，以便您可以查看已停止容器的状态和日志等信息 这时候可以更改原来容器的名称或删除已停止的容器 docker rename ubuntu-old ubuntu-test Q:\\pyCharmWS\\chatgpts\\dockfiles>docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 918a3b2ccc42 fastchat:v0 \"/bin/bash\" 41 minutes ago Exited (130) 11 minutes ago ubuntu-test docker rm ubuntu-test 重启容器 docker restart ubuntu-test 将容器保存为镜像，以便稍后再次使用或与其他人共享 要将容器保存为镜像，可以使用docker commit命令。以下是保存容器为镜像的步骤： 确保您的容器处于停止状态。如果容器正在运行，请先停止它： docker stop 使用docker commit命令将容器保存为镜像。在命令中指定容器的名称或ID以及要为新镜像指定的名称和标签： docker commit 例如： docker commit mycontainer myimage:v1 这将创建一个名为myimage，标签为v1的新镜像 等待docker commit命令完成，它会将容器的文件系统和元数据保存为新的镜像。一旦完成，您可以使用docker images命令查看新创建的镜像 现在，您已经将容器保存为新的镜像。您可以使用该镜像创建新的容器，或将其推送到镜像仓库以供其他人使用 请注意，使用docker commit命令保存容器为镜像时，镜像将包含容器中当前的文件系统状态和配置。这意味着如果容器中有任何不必要的文件或敏感信息，它们也会包含在保存的镜像中。因此，在保存容器之前，最好确保容器中不包含不必要的文件，并遵循最佳实践来保护敏感信息 值得一提的是，docker commit 命令是将容器的状态保存为镜像，而不是推荐的方法 更好的做法是使用 Dockerfile 来定义容器的配置和状态，并使用 docker build 命令构建镜像。这样可以更好地跟踪和管理镜像的变更 dockfile 构建一个基于ubuntu的anaconda环境 # 使用基础镜像，选择适合您的环境 # FROM arm64v8/ubuntu:20.04 FROM ubuntu:20.04 # 安装依赖库和工具 RUN apt update RUN apt-get install -y wget # 下载并安装 Anaconda https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/ RUN wget -qO ~/anaconda.sh https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2023.03-0-Linux-x86_64.sh # RUN wget -qO ~/anaconda.sh https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2023.03-0-Linux-aarch64.sh RUN /bin/bash ~/anaconda.sh -b -p /opt/anaconda3 RUN rm ~/anaconda.sh # 将 Anaconda 添加到环境变量 ENV PATH=\"/opt/anaconda3/bin:${PATH}\" RUN conda create -y -n chat38 python=3.8 anaconda # 设置工作目录 WORKDIR /app # 指定全局 shell 环境，这样才能用source SHELL [\"/bin/bash\", \"-c\"] # 切换py环境 CMD source activate chat38 RUN pip install simplejson 除了SHELL [\"/bin/bash\", \"-c\"]，还可以每次指定bash环境，CMD /bin/bash -c \"source activate chat38\" 发布和部署 要将镜像发布到 Docker Hub 上，需要按照以下步骤进行操作： 注册 Docker Hub 账号，如果你还没有 Docker Hub 账号，首先需要在Docker Hub的官方网站上进行注册 登录 Docker Hub，使用以下命令在终端中登录到 Docker Hub Q:\\pyCharmWS\\chatgpts\\dockfiles>docker login -u narutohyc Password: Login Succeeded 标记镜像，在发布到 Docker Hub 之前，需要为镜像添加一个适当的标签，以便将其与你的 Docker Hub 用户名和存储库关联起来，使用以下命令为镜像添加标签 docker tag /: 其中， 是你要发布的镜像的 ID， 是你的 Docker Hub 用户名， 是你想要为镜像设置的存储库名称， 是一个可选的标签，用于标识镜像的版本号 发布镜像，使用以下命令将标记后的镜像发布到 Docker Hub docker push /: 这将把镜像推送到 Docker Hub 上的指定存储库中 确认发布，登录到 Docker Hub 的网站，访问你的 Docker Hub 账号，你应该能够在相应的存储库中看到已发布的镜像 请注意，发布到 Docker Hub 的镜像将成为公开可访问的，任何人都可以从 Docker Hub 上获取并使用该镜像。如果你希望限制访问权限，可以考虑使用私有仓库，或者在 Docker Hub 上创建一个私有的组织来管理镜像的访问权限 示例 演示 Docker 安装 Redis 一个命令跑起来：docker run -d -p 6379:6379 --name redis redis:latest 命令参考：https://docs.docker.com/engine/reference/commandline/run/ 安装 Wordpress 定义docker-compose.yml文件 version: '3.1' services: wordpress: image: wordpress restart: always ports: - 8080:80 environment: WORDPRESS_DB_HOST: db WORDPRESS_DB_USER: exampleuser WORDPRESS_DB_PASSWORD: examplepass WORDPRESS_DB_NAME: exampledb volumes: - wordpress:/var/www/html db: image: mysql:5.7 restart: always environment: MYSQL_DATABASE: exampledb MYSQL_USER: exampleuser MYSQL_PASSWORD: examplepass MYSQL_RANDOM_ROOT_PASSWORD: '1' volumes: - db:/var/lib/mysql volumes: wordpress: db: 执行docker-compose up -d 实战neo4j docker安装部署neo4j 安装neo4j 拉取neo4j镜像 从docker官方镜像中找合适的镜像 docker search neo4j 拉取镜像源 docker pull neo4j(:版本号) # 缺省 \":版本号\" 时默认安装latest版本的 查看本地镜像，检验是否拉取成功 docker images 图算法插件 neo4j提供了一系列常用的图算法，该算法库需要单独安装，注意版本对应关系 点击上方官网链接，下载Neo4j Graph Data Science下的文件，放到$NEO4J_HOME/plugins目录中 将以下内容添加到您的$NEO4J_HOME/conf/neo4j.conf文件中，参考这里 dbms.security.procedures.unrestricted=apoc.*,gds.* 此配置条目是必需的，因为 GDS 库访问 Neo4j 的低级组件以最大化性能 重启 Neo4j，在docker下就是重启 为了验证您的安装，可以输入以下命令 RETURN gds.version() 要列出所有已安装的算法，请运行以下gds.list()过程 CALL gds.list() 例子: neo4j实现PageRank算法 启动neo4j 找一个目录存放docker的各镜像运行目录，比如我这里选的是/home/huangyc/docker 然后再在这个目录新建具体的镜像对应的文件夹/home/huangyc/docker/neo4j，在下面新建四个文件夹(实际上好像不需要手动建，执行命令时自动会新建) data: 数据存放的文件夹 logs: 运行的日志文件夹 conf: 数据库配置文件夹(在配置文件neo4j.conf中配置包括开放远程连接、设置默认激活的数据库) import: 为了大批量导入csv来构建数据库，需要导入的节点文件nodes.csv和关系文件rel.csv需要放到这个文件夹下 plugins: 存放jar插件 启动命令格式如下 docker run -d --name container_name \\ //-d表示容器后台运行 --name指定容器名字 -p 7474:7474 -p 7687:7687 \\ //映射容器的端口号到宿主机的端口号 -v /home/huangyc/docker/neo4j/data:/data \\ //把容器内的数据目录挂载到宿主机的对应目录下 -v /home/huangyc/docker/neo4j/logs:/logs \\ //挂载日志目录 -v /home/huangyc/docker/neo4j/conf:/var/lib/neo4j/conf //挂载配置目录 -v /home/huangyc/docker/neo4j/import:/var/lib/neo4j/import \\ //挂载数据导入目录 -v /home/huangyc/docker/neo4j/plugins:/var/lib/neo4j/plugins \\ //挂载数据导入目录 --env NEO4J_AUTH=neo4j/password \\ //设定数据库的用户名和和密码 neo4j //指定使用的镜像 也可以写成单行命令 docker run -d --name neo4j_hyc -p 7474:7474 -p 7687:7687 -v /home/huangyc/docker/neo4j/data:/data -v /home/huangyc/docker/neo4j/logs:/logs -v /home/huangyc/docker/neo4j/conf:/var/lib/neo4j/conf -v /home/huangyc/docker/neo4j/import:/var/lib/neo4j/import -v /home/huangyc/docker/neo4j/plugins:/var/lib/neo4j/plugins --env NEO4J_AUTH=neo4j/hyc neo4j py库 使用Python访问图数据库，主要使用的库时py2neo和neo4j， py2neo通过操作python变量，达到操作neo4j的目的，同时也支持cypher语法 neo4j主要时执行CQL(cypher)语句 cypher 语法 安装 pip install py2neo 使用例子 # coding:utf-8 from py2neo import Graph, Node, Relationship # 连接neo4j数据库，输入地址、用户名、密码 graph = Graph(\"http://192.168.1.106:7474\", name=\"neo4j\") graph.delete_all() # 创建结点 test_node_1 = Node('ru_yi_zhuan', name='皇帝') # 修改的部分 test_node_2 = Node('ru_yi_zhuan', name='皇后') # 修改的部分 test_node_3 = Node('ru_yi_zhuan', name='公主') # 修改的部分 graph.create(test_node_1) graph.create(test_node_2) graph.create(test_node_3) # 创建关系 # 分别建立了test_node_1指向test_node_2和test_node_2指向test_node_1两条关系，关系的类型为\"丈夫、妻子\"，两条关系都有属性count，且值为1。 node_1_zhangfu_node_1 = Relationship(test_node_1, '丈夫', test_node_2) node_1_zhangfu_node_1['count'] = 1 node_2_qizi_node_1 = Relationship(test_node_2, '妻子', test_node_1) node_2_munv_node_1 = Relationship(test_node_2, '母女', test_node_3) node_2_qizi_node_1['count'] = 1 graph.create(node_1_zhangfu_node_1) graph.create(node_2_qizi_node_1) graph.create(node_2_munv_node_1) print(graph) print(test_node_1) print(test_node_2) print(node_1_zhangfu_node_1) print(node_2_qizi_node_1) print(node_2_munv_node_1) 安装 pip install neo4j 使用例子 from neo4j import GraphDatabase driver = GraphDatabase.driver(\"bolt://localhost:7687\", auth=(\"neo4j\", \"password\")) def add_friend(tx, name, friend_name): tx.run(\"MERGE (a:Person {name: $name}) \" \"MERGE (a)-[:KNOWS]->(friend:Person {name: $friend_name})\", name=name, friend_name=friend_name) def print_friends(tx, name): for record in tx.run(\"MATCH (a:Person)-[:KNOWS]->(friend) WHERE a.name = $name \" \"RETURN friend.name ORDER BY friend.name\", name=name): print(record[\"friend.name\"]) with driver.session() as session: session.write_transaction(add_friend, \"Arthur\", \"Guinevere\") session.write_transaction(add_friend, \"Arthur\", \"Lancelot\") session.write_transaction(add_friend, \"Arthur\", \"Merlin\") session.read_transaction(print_friends, \"Arthur\") 实战nebula 基本介绍 NebulaGraph 由三种服务构成：Graph 服务、Meta 服务和 Storage 服务，是一种存储与计算分离的架构 Meta 服务 Meta 服务是由 nebula-metad 进程提供的，用户可以根据场景配置 nebula-metad 进程数量： 测试环境中，用户可以在 NebulaGraph 集群中部署 1 个或 3 个 nebula-metad 进程。如果要部署 3 个，用户可以将它们部署在 1 台机器上，或者分别部署在不同的机器上。 生产环境中，建议在 NebulaGraph 集群中部署 3 个 nebula-metad 进程。请将这些进程部署在不同的机器上以保证高可用。 所有 nebula-metad 进程构成了基于 Raft 协议的集群，其中一个进程是 leader，其他进程都是 follower。 leader 是由多数派选举出来，只有 leader 能够对客户端或其他组件提供服务，其他 follower 作为候补，如果 leader 出现故障，会在所有 follower 中选举出新的 leader。 Graph 服务 Graph 服务是由nebula-graphd 进程提供，服务主要负责处理查询请求，包括解析查询语句、校验语句、生成执行计划以及按照执行计划执行四个大步骤，查询请求发送到 Graph 服务后，会由如下模块依次处理： Parser：词法语法解析模块。 Validator：语义校验模块。 Planner：执行计划与优化器模块。 Executor：执行引擎模块。 Storage 服务 NebulaGraph 的存储包含两个部分，一个是 Meta 相关的存储，称为 Meta 服务，在前文已有介绍。 另一个是具体数据相关的存储，称为 Storage 服务。其运行在 nebula-storaged 进程中 环境搭建 以nebula 3.2.1为例 下载并安装NebulaGraph wget https://oss-cdn.nebula-graph.com.cn/package/3.2.1/nebula-graph-3.2.1.el7.x86_64.rpm sudo rpm -ivh --prefix=/home/huangyc/nebula nebula-graph-3.2.1.el7.x86_64.rpm --prefix为可选项，用于指定安装路径 如不设置，系统会将 NebulaGraph 安装到默认路径/usr/local/nebula/ 集群配置 集群配置需要保证集群机器配置ssh免密 修改每个服务器上的 NebulaGraph 配置文件 NebulaGraph 的所有配置文件均位于安装目录的etc目录内，包括nebula-graphd.conf、nebula-metad.conf和nebula-storaged.conf，用户可以只修改所需服务的配置文件。各个机器需要修改的配置文件如下。 机器名称 待修改配置文件 A nebula-graphd.conf、nebula-storaged.conf、nebula-metad.conf B nebula-graphd.conf、nebula-storaged.conf、nebula-metad.conf C nebula-graphd.conf、nebula-storaged.conf、nebula-metad.conf D nebula-graphd.conf、nebula-storaged.conf E nebula-graphd.conf、nebula-storaged.conf 机器 A 配置 nebula-graphd.conf ########## networking ########## # Comma separated Meta Server Addresses --meta_server_addrs=192.168.10.111:9559,192.168.10.112:9559,192.168.10.113:9559 # Local IP used to identify the nebula-graphd process. # Change it to an address other than loopback if the service is distributed or # will be accessed remotely. --local_ip=192.168.10.111 # Network device to listen on --listen_netdev=any # Port to listen on --port=9669 nebula-storaged.conf ########## networking ########## # Comma separated Meta server addresses --meta_server_addrs=192.168.10.111:9559,192.168.10.112:9559,192.168.10.113:9559 # Local IP used to identify the nebula-storaged process. # Change it to an address other than loopback if the service is distributed or # will be accessed remotely. --local_ip=192.168.10.111 # Storage daemon listening port --port=9779 nebula-metad.conf ########## networking ########## # Comma separated Meta Server addresses --meta_server_addrs=192.168.10.111:9559,192.168.10.112:9559,192.168.10.113:9559 # Local IP used to identify the nebula-metad process. # Change it to an address other than loopback if the service is distributed or # will be accessed remotely. --local_ip=192.168.10.111 # Meta daemon listening port --port=9559 机器 D 配置 nebula-graphd.conf ########## networking ########## # Comma separated Meta Server Addresses --meta_server_addrs=192.168.10.111:9559,192.168.10.112:9559,192.168.10.113:9559 # Local IP used to identify the nebula-graphd process. # Change it to an address other than loopback if the service is distributed or # will be accessed remotely. --local_ip=192.168.10.114 # Network device to listen on --listen_netdev=any # Port to listen on --port=9669 nebula-storaged.conf ########## networking ########## # Comma separated Meta server addresses --meta_server_addrs=192.168.10.111:9559,192.168.10.112:9559,192.168.10.113:9559 # Local IP used to identify the nebula-storaged process. # Change it to an address other than loopback if the service is distributed or # will be accessed remotely. --local_ip=192.168.10.114 # Storage daemon listening port --port=9779 ABC三台配置除了local_ip，其他都一致，DE两台配置除了local_ip，其他都一致 启动服务 命令学习 使用脚本nebula.service管理服务，包括启动、停止、重启、中止和查看 nebula.service的默认路径是/usr/local/nebula/scripts，如果修改过安装路径，请使用实际路径 语法 sudo /usr/local/nebula/scripts/nebula.service [-v] [-c ] 比如对于非容器部署的 NebulaGraph，执行如下命令启动服务： sudo /usr/local/nebula/scripts/nebula.service start all [INFO] Starting nebula-metad... [INFO] Done [INFO] Starting nebula-graphd... [INFO] Done [INFO] Starting nebula-storaged... [INFO] Done 执行如下命令查看 NebulaGraph 服务状态 sudo /usr/local/nebula/scripts/nebula.service status all 如果返回如下结果，表示 NebulaGraph 服务正常运行 [INFO] nebula-metad(33fd35e): Running as 29020, Listening on 9559 [INFO] nebula-graphd(33fd35e): Running as 29095, Listening on 9669 [WARN] nebula-storaged after v3.0.0 will not start service until it is added to cluster. [WARN] See Manage Storage hosts:ADD HOSTS in https://docs.nebula-graph.io/ [INFO] nebula-storaged(33fd35e): Running as 29147, Listening on 9779 正常启动 NebulaGraph 后，nebula-storaged进程的端口显示红色。这是因为nebula-storaged在启动流程中会等待nebula-metad添加当前 Storage 服务，当前 Storage 服务收到 Ready 信号后才会正式启动服务。从 3.0.0 版本开始，在配置文件中添加的 Storage 节点无法直接读写，配置文件的作用仅仅是将 Storage 节点注册至 Meta 服务中。必须使用ADD HOSTS命令后，才能正常读写 Storage 节点。 注册 具体是通过nebula-console命令行或者studio页面执行，用 java client 也可以的, 底层逻辑都是通过客户端发送一条 add hosts xxxxx query ADD HOSTS 192.168.40.39:9779, 192.168.40.40:9779, 192.168.40.41:9779; 比如使用python客户端 from nebula3.gclient.net import ConnectionPool from nebula3.Config import Config # define a config config = Config() config.max_connection_pool_size = 10 # init connection pool connection_pool = ConnectionPool() # if the given servers are ok, return true, else return false ok = connection_pool.init([('192.168.123.xx', 9669)], config) # option 1 control the connection release yourself # get session from the pool session = connection_pool.get_session('root', 'nebula') session.execute(\"ADD HOSTS 192.168.123.24:9779\") 等待20s后，重新查看服务状态，发现警告没有就说明成功了 [root@localhost nebula]# sudo scripts/nebula.service status all [WARN] The maximum files allowed to open might be too few: 1024 [INFO] nebula-metad(bb2e684): Running as 11660, Listening on 9559 [INFO] nebula-graphd(bb2e684): Running as 11727, Listening on 9669 [INFO] nebula-storaged(bb2e684): Running as 11764, Listening on 9779 清空图 数据清除后，如无备份，无法恢复。使用该功能务必谨慎 CLEAR SPACE不是原子性操作。如果执行出错，请重新执行，避免残留数据 图空间中的数据量越大，CLEAR SPACE消耗的时间越长 如果CLEAR SPACE的执行因客户端连接超时而失败，可以增大 Graph 服务配置中storage_client_timeout_ms参数的值 在CLEAR SPACE的执行过程中，向该图空间写入数据的行为不会被自动禁止 这样的写入行为可能导致CLEAR SPACE清除数据不完全，残留的数据也可能受到损坏 CLEAR SPACE [IF EXISTS] ; 保留的数据¶ 图空间中，CLEAR SPACE不会删除的数据包括： Tag 信息 Edge type 信息 原生索引和全文索引的元数据 DROP SPACE语句用于删除指定图空间以及其中的所有信息 DROP SPACE [IF EXISTS] ; 客户端 NebulaGraph 支持多种类型的客户端，包括命令行客户端、可视化界面客户端和流行编程语言客户端 详情参见客户端列表 前提条件¶ 官方文档 NebulaGraph 服务已启动 运行 NebulaGraph Console 的机器和运行 NebulaGraph 的服务器网络互通 NebulaGraph Console 的版本兼容 NebulaGraph 的版本 使用命令arch，查看系统结构，去官网下载安装包，重命名文件为nebula_console 为用户授予 nebula-console 文件的执行权限 chmod 111 nebula-console 在命令行界面中，切换工作目录至 nebula-console 文件所在目录，执行如下命令连接 NebulaGraph ./nebula-console -addr -port -u -p [-t 120] [-e \"nGQL_statement\" | -f filename.nGQL] 例如，要连接到部署在 192.168.10.8 上的 Graph 服务，运行以下命令 ./nebula_console -addr 192.168.10.8 -port 9669 -u root -p nebula 已安装 Python，版本为 3.6 及以上，版本对照表¶ NebulaGraph 版本 NebulaGraph Python 版本 3.2.1 3.1.0 2.6.x 2.6.0 pip安装 $ pip install nebula3-python== 初始化一些数据 执行如下语句创建名为basketballplayer的图空间 CREATE SPACE basketballplayer(partition_num=15, replica_factor=1, vid_type=fixed_string(32)); 执行命令SHOW HOSTS检查分片的分布情况，确保平衡分布 nebula> SHOW HOSTS; +-------------+-----------+-----------+-----------+--------------+----------------------------------+------------------------+---------+ | Host | Port | HTTP port | Status | Leader count | Leader distribution | Partition distribution | Version | +-------------+-----------+-----------+-----------+--------------+----------------------------------+------------------------+---------+ | \"storaged0\" | 9779 | 19669 | \"ONLINE\" | 5 | \"basketballplayer:5\" | \"basketballplayer:5\" | \"3.1.0\" | | \"storaged1\" | 9779 | 19669 | \"ONLINE\" | 5 | \"basketballplayer:5\" | \"basketballplayer:5\" | \"3.1.0\" | | \"storaged2\" | 9779 | 19669 | \"ONLINE\" | 5 | \"basketballplayer:5\" | \"basketballplayer:5\" | \"3.1.0\" | +-------------+-----------+-----------+-----------+--------------+----------------------------------+------------------------+---------+ 选择图空间basketballplayer nebula[(none)]> USE basketballplayer; 用户可以执行命令SHOW SPACES查看创建的图空间 nebula> SHOW SPACES; +--------------------+ | Name | +--------------------+ | \"basketballplayer\" | +--------------------+ 创建 Tag 和 Edge type 语法: CREATE {TAG | EDGE} [IF NOT EXISTS] { | } ( [NULL | NOT NULL] [DEFAULT ] [COMMENT ''] [{, [NULL | NOT NULL] [DEFAULT ] [COMMENT '']} ...] ) [TTL_DURATION = ] [TTL_COL = ] [COMMENT = '']; 创建 Tag:player和team，以及 Edge type:follow和serve。说明如下表。 | 名称 | 类型 | 属性 | | ------ | --------- | -------------------------------- | | player | Tag | name (string), age (int) | | team | Tag | name (string) | | follow | Edge type | degree (int) | | serve | Edge type | start_year (int), end_year (int) | CREATE TAG player(name string, age int); CREATE TAG team(name string); CREATE EDGE follow(degree int); CREATE EDGE serve(start_year int, end_year int); 插入点和边 插入点 INSERT VERTEX [IF NOT EXISTS] [tag_props, [tag_props] ...] VALUES : ([prop_value_list]) tag_props: tag_name ([prop_name_list]) prop_name_list: [prop_name [, prop_name] ...] prop_value_list: [prop_value [, prop_value] ...] vid是 Vertex ID 的缩写，vid在一个图空间中是唯一的。参数详情请参见 INSERT VERTEX 插入边 INSERT EDGE [IF NOT EXISTS] ( ) VALUES -> [@] : ( ) [, -> [@] : ( ), ...]; ::= [ [, ] ...] ::= [ [, ] ...] 参数详情请参见 INSERT EDGE 插入代表球员和球队的点 nebula> INSERT VERTEX player(name, age) VALUES \"player100\":(\"Tim Duncan\", 42); nebula> INSERT VERTEX player(name, age) VALUES \"player101\":(\"Tony Parker\", 36); nebula> INSERT VERTEX player(name, age) VALUES \"player102\":(\"LaMarcus Aldridge\", 33); nebula> INSERT VERTEX team(name) VALUES \"team203\":(\"Trail Blazers\"), \"team204\":(\"Spurs\"); 插入代表球员和球队之间关系的边 nebula> INSERT EDGE follow(degree) VALUES \"player101\" -> \"player100\":(95); nebula> INSERT EDGE follow(degree) VALUES \"player101\" -> \"player102\":(90); nebula> INSERT EDGE follow(degree) VALUES \"player102\" -> \"player100\":(75); nebula> INSERT EDGE serve(start_year, end_year) VALUES \"player101\" -> \"team204\":(1999, 2018),\"player102\" -> \"team203\":(2006, 2015); 查询数据¶ GO 语句可以根据指定的条件遍历数据库。GO语句从一个或多个点开始，沿着一条或多条边遍历，返回YIELD子句中指定的信息。 FETCH 语句可以获得点或边的属性。 LOOKUP 语句是基于索引的，和WHERE子句一起使用，查找符合特定条件的数据。 MATCH 语句是查询图数据最常用的，可以灵活的描述各种图模式，但是它依赖索引去匹配 NebulaGraph 中的数据模型，性能也还需要调优。 &#x1F336;注意 无属性索引的时候，在没有指定条件的时候，可以通过数据扫描的sample下推去扫得 limit 的数据 而带有filter条件时，需要全扫才行，这个情况在nebula里是被禁止的，需要创建这个tag上的索引才能查询 # 在 Tag player 的 name 属性和 Edge type belong_to 上创建索引 CREATE TAG INDEX IF NOT EXISTS name ON player(name(20)); CREATE EDGE INDEX IF NOT EXISTS belong_to_index on belong_to(); # 重建索引使其生效 REBUILD EDGE INDEX name; REBUILD EDGE INDEX belong_to_index; # 开始查询 MATCH () 图模式 模式(pattern)和图模式匹配，是图查询语言的核心功能 单点模式 (a) 示例为一个简单的模式，描述了单个点，并使用变量a命名该点 多点关联模式 多个点通过边相连是常见的结构，模式用箭头来描述两个点之间的边。例如： (a)-[]->(b) 示例为一个简单的数据结构：两个点和一条连接两个点的边，两个点分别为a和b，边是有方向的，从a到b 这种描述点和边的方式可以扩展到任意数量的点和边，例如： (a)-[]->(b) 这样的一系列点和边称为路径(path) 只有在涉及某个点时，才需要命名这个点。如果不涉及这个点，则可以省略名称，例如： (a)-[]->() Tag模式 nGQL 中的Tag概念与 openCypher 中的Label有一些不同。例如，必须创建一个Tag之后才能使用它，而且Tag还定义了属性的类型 模式除了简单地描述图中的点之外，还可以描述点的 Tag。例如： (a:User)-[]->(b) 模式也可以描述有多个 Tag 的点，例如： (a:User:Admin)-[]->(b) 属性模式 点和边是图的基本结构。nGQL 在这两种结构上都可以增加属性，方便实现更丰富的模型。 在模式中，属性的表示方式为：用花括号括起一些键值对，用英文逗号分隔。例如一个点有两个属性： (a {name: 'Andres', sport: 'Brazilian Ju-Jitsu'}) 在这个点上可以有一条边是： (a)-[{blocked: false}]->(b) 边模式 描述一条边最简单的方法是使用箭头连接两个点。 可以用以下方式描述边以及它的方向性。如果不关心边的方向，可以省略箭头，例如： (a)-[]-(b) 和点一样，边也可以命名。一对方括号用于分隔箭头，变量放在两者之间。例如： (a)-[r]->(b) 和点上的 Tag 一样，边也可以有类型。描述边的类型，例如： (a)-[r:REL_TYPE]->(b) 和点上的 Tag 不同，一条边只能有一种 Edge type。但是如果我们想描述多个可选 Edge type，可以用管道符号（|）将可选值分开，例如： (a)-[r:TYPE1|TYPE2]->(b) 和点一样，边的名称可以省略，例如： (a)-[:REL_TYPE]->(b) 变长模式 在图中指定边的长度来描述多条边（以及中间的点）组成的一条长路径，不需要使用多个点和边来描述。例如： (a)-[*2]->(b) 该模式描述了 3 点 2 边组成的图，它们都在一条路径上（长度为 2），等价于： (a)-[]->()-[]->(b) 也可以指定长度范围，这样的边模式称为variable-length edges，例如： (a)-[*3..5]->(b) *3..5表示最小长度为 3，最大长度为 5。 该模式描述了 4 点 3 边、5 点 4 边或 6 点 5 边组成的图。 也可以忽略最小长度，只指定最大长度，例如： (a)-[*..5]->(b) 必须指定最大长度，不支持仅指定最小长度（(a)-[*3..]->(b)）或都不指定（(a)-[*]->(b)）。 路径变量 一系列连接的点和边称为路径。nGQL 允许使用变量来命名路径，例如： p = (a)-[*3..5]->(b) 可以在 MATCH 语句中使用路径变量 注释 支持四种注释方式：#、//、/* */ nGQL 语句中的反斜线（\\）代表换行 数据类型 字符串的表示方式为用双引号或单引号包裹，例如\"Hello, Cooper\"或'Hello, Cooper' 日期和时间的类型，包括DATE、TIME、DATETIME、TIMESTAMP和DURATION nebula> RETURN DATE({year:-123, month:12, day:3}); +------------------------------------+ | date({year:-(123),month:12,day:3}) | +------------------------------------+ | -123-12-03 | +------------------------------------+ nebula> RETURN DATE(\"23333\"); +---------------+ | date(\"23333\") | +---------------+ | 23333-01-01 | +---------------+ # 传入当前时间。 nebula> RETURN timestamp(); +-------------+ | timestamp() | +-------------+ | 1625469277 | +-------------+ # 传入指定时间。 nebula> RETURN timestamp(\"2022-01-05T06:18:43\"); +----------------------------------+ | timestamp(\"2022-01-05T06:18:43\") | +----------------------------------+ | 1641363523 | +----------------------------------+ date()支持的属性名称包括year、month和day。date()支持输入YYYY、YYYY-MM或YYYY-MM-DD，未输入的月份或日期默认为01 time()支持的属性名称包括hour、minute和second datetime()支持的属性名称包括year、month、day、hour、minute和second 列表（List）是复合数据类型，一个列表是一组元素的序列，可以通过元素在序列中的位置访问列表中的元素 nGQL 的下标支持从前往后查询，从 0 开始，0 表示第一个元素，1 表示第二个元素，以此类推；也支持从后往前查询，从-1 开始，-1 表示最后一个元素，-2 表示倒数第二个元素，以此类推。 [M]：表示下标为 M 的元素。 [M..N]：表示M ≤ 下标 ＜ N的元素。N为 0 时，返回为空。 [M..]：表示M ≤ 下标的元素。 [..N]：表示下标 ＜ N的元素。N为 0 时，返回为空。 可视化 NebulaGraph Studio（简称 Studio）是一款可以通过 Web 访问的开源图数据库可视化工具，搭配 NebulaGraph 内核使用，提供构图、数据导入、编写 nGQL 查询等一站式服务。 前提条件¶ 在部署 RPM 版 Studio 之前，用户需要确认以下信息： NebulaGraph 服务已经部署并启动。详细信息，参考 NebulaGraph 安装部署 使用的 Linux 发行版为 CentOS ，已安装 lsof 确保以下端口未被占用，7001是Studio 提供 web 服务使用的 从官网下载nebula-graph-studio-3.4.1.x86_64.rpm，使用以下命令安装到指定路径 sudo rpm -i nebula-graph-studio-3.4.1.x86_64.rpm --prefix= 安装完，自动会启动，当屏幕返回以下信息时，表示 PRM 版 Studio 已经成功启动。 Start installing NebulaGraph Studio now... NebulaGraph Studio has been installed. NebulaGraph Studio started automatically. 启动成功后，在浏览器地址栏输入 http://:7001 注意: host处填写为 ip:port格式 用户名和密码：根据 Nebula Graph 的身份验证设置填写登录账号和密码 如果未启用身份验证，可以填写默认用户名 root 和任意密码。 如果已启用身份验证，但是未创建账号信息，用户只能以 GOD 角色登录，必须填写 root 及对应的密码 nebula。 如果已启用身份验证，同时又创建了不同的用户并分配了角色，不同角色的用户使用自己的账号和密码登录。 如果在浏览器窗口中能看到以下登录界面，表示已经成功部署并启动 Studio 异常处理¶ 如果在安装过程中自动启动失败或是需要手动启动或停止服务，请使用以下命令： 手动启动服务 bash /usr/local/nebula-graph-studio/scripts/rpm/start.sh 手动停止服务 bash /usr/local/nebula-graph-studio/scripts/rpm/stop.sh 如果启动服务时遇到报错报错 ERROR: bind EADDRINUSE 0.0.0.0:7001，用户可以通过以下命令查看端口 7001 是否被占用。 lsof -i:7001 如果端口被占用，且无法结束该端口上进程，用户可以通过以下命令修改 Studio 服务启动端口，并重新启动服务。 //修改 studio 服务启动端口 vi etc/studio-api.yam //修改 Port: 7001 // 修改这个端口号，改成任意一个当前可用的即可 //重启服务 systemctl restart nebula-graph-studio.service 集群监控 NebulaGraph Dashboard(简称Dashboard)是一款用于监控NebulaGraph集群中机器和服务状态的可视化工具 数据导入 Nebula Importer 数据导入实践 Nebula 目前作为较为成熟的产品，已经有着很丰富的生态。数据导入的维度而言就已经提供了多种选择。有大而全的Nebula Exchange，小而精简的Nebula Importer, 还有为 Spark / Flink 引擎提供的Nebula Spark Connector 和 Nebula Flink Connector。 使用场景介绍： Nebula Exchange 需要将来自 Kafka、Pulsar 平台的流式数据, 导入 Nebula Graph 数据库 需要从关系型数据库（如 MySQL）或者分布式文件系统（如 HDFS）中读取批式数据 需要将大批量数据生成 Nebula Graph 能识别的 SST 文件 Nebula Importer Importer 适用于将本地 CSV 文件的内容导入至 Nebula Graph 中 Nebula Spark Connector: 在不同的 Nebula Graph 集群之间迁移数据 在同一个 Nebula Graph 集群内不同图空间之间迁移数据 Nebula Graph 与其他数据源之间迁移数据 结合 Nebula Algorithm 进行图计算 Nebula Flink Connector 在不同的 Nebula Graph 集群之间迁移数据 在同一个 Nebula Graph 集群内不同图空间之间迁移数据 Nebula Graph 与其他数据源之间迁移数据 总体来说，Exchange 大而全，可以和大部分的存储引擎结合，导入到 Nebula 中，但是需要部署Spark 环境。 Importer 使用简单，所需依赖较少，但需要自己提前生成数据文件，配置好 schema 一劳永逸，但是不支持断点续传，适合数据量中等。 Spark / Flink Connector 需要和流数据结合。 不同的场景选择不同的工具，如果作为新人使用 Nebula 在导入数据时，建议使用 Nebula Importer 工具，简单快速上手。 k8s k8s官网中文文档 Kubernetes（K8S）教程 Kubernetes Clusters-狂乱的贵公子 简介 Kubernetes (K8S) 是什么 它是一个为 容器化 应用提供集群部署和管理的开源工具，由 Google 开发 Kubernetes 这个名字源于希腊语，意为“舵手”或“飞行员”。k8s 这个缩写是因为 k 和 s 之间有八个字符的关系。 Google 在 2014 年开源了 Kubernetes 项目 主要特性： 高可用，不宕机，自动灾难恢复 灰度更新，不影响业务正常运转 一键回滚到历史版本 方便的伸缩扩展（应用伸缩，机器加减）、提供负载均衡 有一个完善的生态 部署方案 传统部署方式： 应用直接在物理机上部署，机器资源分配不好控制，出现Bug时，可能机器的大部分资源被某个应用占用，导致其他应用无法正常运行，无法做到应用隔离 虚拟机部署 在单个物理机上运行多个虚拟机，每个虚拟机都是完整独立的系统，性能损耗大 容器部署 所有容器共享主机的系统，轻量级的虚拟机，性能损耗小，资源隔离，CPU和内存可按需分配 Kubernetes 可以为你提供集中式的管理集群机器和应用，加机器、版本升级、版本回滚，那都是一个命令就搞定的事，不停机的灰度更新，确保高可用、高性能、高扩展 重要概念 Pod 豆荚，K8S 调度、管理的最小单位，一个 Pod 可以包含一个或多个容器，每个 Pod 有自己的虚拟IP。一个工作节点可以有多个 pod，主节点会考量负载自动调度 pod 到哪个节点运行 Kubernetes 组件 Kubernetes 是一个开源的容器编排和管理平台，由多个组件组成。下面是 Kubernetes 的一些核心组件： kube-apiserver：作为 Kubernetes API 的前端组件，处理来自用户、kubectl 命令行工具以及其他组件的 API 请求，并将其存储在 etcd 中 etcd：是一个高度可用且一致性的分布式键值存储，用于保存 Kubernetes 集群的配置数据、元数据和状态信息 kube-scheduler：负责监视新创建的 Pod，并根据可用的计算资源、硬件和软件要求选择合适的节点进行调度 kube-controller-manager：包含多个控制器，用于管理集群中的各种资源，例如节点控制器、副本控制器、服务控制器等。它负责保持期望状态和实际状态之间的一致性 kubelet：在每个节点上运行的代理组件，负责管理节点上的容器，与容器运行时进行交互，接收来自 kube-apiserver 的指令，并确保容器按照期望状态运行 kube-proxy：负责为 Service 对象提供网络代理和负载均衡功能，将网络流量路由到正确的容器上 Container Runtime：Kubernetes 支持多种容器运行时，如 Docker、containerd、CRI-O 等，用于创建和管理容器 kube-dns/coredns：提供集群内 DNS 服务，用于解析 Kubernetes 集群中的服务名称 Dashboard：提供可视化的 Kubernetes 集群管理界面，用于查看和操作集群中的资源 除了这些核心组件之外，还有其他的辅助组件和插件，如Ingress Controller（用于管理入口流量）、Heapster（用于集群监控和性能分析）、Prometheus（用于指标收集和监控）、Fluentd（用于日志收集和聚合）等，这些组件可以根据具体需求选择安装和配置 安装和部署 占位... Copyright © narutohyc.com 2021 all right reserved，powered by Gitbook该文件修订时间： 2023-09-07 09:09:57 new Valine({el: \"#vcomments\",appId: 'evyLlP61gQN3G3OM2GQq1rzH-gzGzoHsz',appKey: 'utUrzoiqNaDEGlgr09JL1pXB',placeholder: '欢迎留下评论交流~',avatar: 'wavatar',meta: undefined,pageSize: 15,lang: 'zh-CN',recordIP: false}) "},"chapters/9.elementary_os记录.html":{"url":"chapters/9.elementary_os记录.html","title":"elementary_os记录","keywords":"","body":"Elementary os介绍硬盘格式转换双系统安装软件安装安装typora显卡驱动稳定版本安装ppa第三方NVIDIA官网安装elasticsearch6es和kibana版本jdk环境安装新建用户es配置启动访问kibana安装安装head远程桌面rdesktop迅雷chrome插件破解VIP会员视频集合Tampermonkeygitzip for githuboctotreeCNKI PDF Download其他技巧自动挂载磁盘查看磁盘属性添加挂载项ssh到服务器 Elementary os介绍 硬盘格式转换 在MBR硬盘中，分区信息直接存储于主引导记录（MBR）中（主引导记录中还存储着系统的引导程序）。但在GPT硬盘中，分区表的位置信息储存在GPT头中。但出于兼容性考虑，硬盘的第一个扇区仍然用作MBR，之后才是GPT头。 跟现代的MBR一样，GPT也使用逻辑区块地址（LBA）取代了早期的CHS寻址方式。传统MBR信息存储于LBA 0，GPT头存储于LBA 1，接下来才是分区表本身。64位Windows操作系统使用16,384字节（或32扇区）作为GPT分区表，接下来的LBA 34是硬盘上第一个分区的开始。 GPT是为了支持2TB以上硬盘而发展的。而且GPT的分区信息是在分区中，而不象MBR一样在主引导扇区，为保护GPT 不受MBR类磁盘管理软件的危害，GPT在主引导扇区建立了一个保护分区 (Protective MBR)的MBR分区表，这种分区的类型标识为0xEE，这个保护分区的大小在Windows下为128MB，Mac OS X下为200MB，在Window磁盘管理器里名为GPT保护分区，可让MBR类磁盘管理软件把GPT看成一个未知格式的分区，而不是错误地当成一个未分区的磁盘。 转换使用Diskpart命令即可完成，方法如下： 按Shift + F10打开命令提示符 输入”Diskpart”(不用输入引号，下同)，并按回车，进入操作界面 输入：”list disk”，查看磁盘信息。注意看磁盘容量来选择 输入：”select disk 0”，选择disk 0为当前操作的磁盘，这里视你需要的转换盘符，一般为安装系统的那块物理硬盘 输入：”Clean”，清空当前磁盘分区 输入：”convert mbr”，转换为MBR分区，还有gpt格式 操作完成，用exit命令关闭提示符窗口，继续按照正常的方法安装系统即可 双系统安装 制作启动盘 空白分区 tf按F2进入BIOS，设置U盘启动 重启 安装类别，这里选something else，表示自己选分区（如果是刚装完win10，立马装linux，可以选第一个） 这里是因为，原先就是win10+linux，现在想重装linux 选择事先分好的分区 正式开始安装 软件安装 安装typora # or run: # sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE wget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add - # add Typora's repository sudo add-apt-repository 'deb https://typora.io/linux ./' sudo apt-get update # install typora sudo apt-get install typora 显卡驱动 Ubuntu 18.04 安装 NVIDIA 显卡驱动 我们今天的目标是在 Ubuntu 18.04 上安装 NVIDIA 显卡驱动，请注意，你的显卡一定要是 NVIDIA 的显卡才能按照这篇文章的方法安装。我将给大家介绍三种安装方法，建议使用第一种方法安装。 先来说说带有 NVIDIA 独立显卡的电脑为什么要安装 NVIDIA 显卡驱动吧。下面是我从维基百科摘抄的显卡工作原理的介绍： 显卡是插在主板上的扩展槽里的（现在一般是 PCI-E 插槽，此前还有 AGP、PCI、ISA 等插槽）。它主要负责把主机向显示器发出的显示信号转化为一般电器信号，使得显示器能明白个人计算机在让它做什么。显卡的主要芯片叫“显示芯片”（Video chipset，也叫 GPU 或 VPU，图形处理器或视觉处理器），是显卡的主要处理单元。显卡上也有和计算机存储器相似的存储器，称为“显示存储器”，简称显存。 早期的显卡只是单纯意义的显卡，只起到信号转换的作用；当前我们一般使用的显卡都带有 3D 画面运算和图形加速功能，所以也叫做“图形加速卡”或“3D 加速卡”。PC 上最早的显卡是 IBM 在 1981 年推出的 5150 个人计算机上所搭载的 MDA 和 CGA 两款 2D 加速卡。 显卡通常由总线接口、PCB 板、显示芯片、显存、RAMDAC、VGA BIOS、VGA 功能插针、D-sub 插座及其他外围组件构成，现在的显卡大多还具有 VGA、DVI 显示器接口或者 HDMI 接口及 S-Video 端子和 Display Port 接口。 电脑硬件有 NVIDIA 的显卡，但是没有驱动，那它是不能工作的，所以为了让显卡能够工作，发挥它的作用，我们需要安装显卡驱动。好的，下面来看看三种不同的安装方法吧。 稳定版本安装 显卡型号 在终端输入：ubuntu-drivers devices，可以看到如下界面： 从上图可以看出，我的显卡是：GM107M [GeForce GTX 860M]，推荐安装的版本号是：nvidia-driver-390 - distro non-free recommended。 开始安装 如果同意安装推荐版本，那我们只需要终端输入：sudo ubuntu-drivers autoinstall 就可以自动安装了。 当然我们也可以使用 apt 命令安装自己想要安装的版本，比如我想安装 340 这个版本号的版本，终端输入：sudo apt install nvidia-340 就自动安装了。 安装过程中按照提示操作，除非你知道每个提示的真实含义，否则所有的提示都选择默认就可以了，安装完成后重启系统，NVIDIA 显卡就可以正常工作了。安装完成后你可以参照 https://linuxconfig.org/benchmark-your-graphics-card-on-linux 上的介绍测试你的显卡。 ppa第三方 使用 PPA 第三方软件仓库安装最新版本 添加 PPA 软件仓库：sudo add-apt-repository ppa:graphics-drivers/ppa，需要输入用户密码，按照提示还需要按下 Enter 键。 更新软件索引：sudo apt update 接下来的步骤同方法一，只是这样我们就可以选择安装最新版本的驱动程序了。 NVIDIA官网安装 打开终端，输入：lshw -numeric -C display，确认自己电脑显卡的型号，如下图： 从上图可以看到，我的电脑的显卡是 product: GM107M [GeForce GTX 860M] [10DE:1392]，然后我们到 NVIDIA 的官网下载相应型号的驱动，官网地址是：https://www.nvidia.com/Download/index.aspx，如下图，我选择 GTX 860 显卡的驱动下载。 注意每个选项，特别是操作系统那里，一定选择 Linux 64-bit 选好后点击 SEARCH 按钮搜索相应的驱动，如下图： 看到了吧，官方最新版本号已经是 418.43 了。点击 DOWNLOAD 按钮下载吧。 接着需要先安装一些 NVIDIA 显卡依赖的软件，在终端依次执行如下命令： sudo dpkg --add-architecture i386 sudo apt update sudo apt install build-essential libc6:i386 Ubuntu 系统默认安装好是使用的一个开源的驱动：nouveau，我们要安装官方的驱动需要先禁用这个开源驱动，方法如下，依次执行： sudo bash -c \"echo blacklist nouveau > /etc/modprobe.d/blacklist-nvidia-nouveau.conf\" sudo bash -c \"echo options nouveau modeset=0 >> /etc/modprobe.d/blacklist-nvidia-nouveau.conf\" 执行完上面两条指令后，我们使用如下命令看看是否成功禁用了开源驱动：cat /etc/modprobe.d/blacklist-nvidia-nouveau.conf。如果和下面一样，表示成功了。 $ cat /etc/modprobe.d/blacklist-nvidia-nouveau.conf blacklist nouveau options nouveau modeset=0 这个时候我们需要先重启一下系统，重启吧。 重启成功后打开终端，输入如下命令：sudo telinit 3。然后按快捷键：CTRL+ALT+F1 进入字符界面，输入用户名和密码，然后登录系统，进入我们保存下载 NVIDIA 驱动的目录，默认是：Downloads/ 目录，cd Downloads/，然后执行：bash NVIDIA-Linux-x86_64-418.43.bin。注意：NVIDIA-Linux-x86_64-418.43.bin 要根据你下载的驱动文件的名字相应改动。 安装过程中都点同意即可，如果你遇到下面的提示，安装下面我的输入输入后回车继续安装： The distribution-provided pre-install script failed! Are you sure you want to continue? -> CONTINUE INSTALLATION Would you like to run the nvidia-xconfig utility? -> YES 安装完成后重启系统就可以点击软件列表中的 NVIDIA 的配置软件配置显卡驱动了，如果你遇到如下报错，请依次在终端输入如下命令解决： 报错：WARNING: Unable to find suitable destination to install 32-bit compatibility libraries 解决办法： sudo dpkg --add-architecture i386 sudo apt update sudo apt install libc6:i386 好了，今天分享了如何安装 NVIDIA 显卡驱动，再次提醒，如果你的显卡不是 NVIDIA 显卡，千万不要这么干，也不要在虚拟机中这么干。 elasticsearch6 es和kibana版本 Elasticsearch Kibana X-Pack Beats^* Logstash^* ES-Hadoop (jar)* APM Server App Search 5.0.x 5.0.x 5.0.x 1.3.x-5.6.x 2.4.x-5.6.x 5.0.x-5.6.x 5.1.x 5.1.x 5.1.x 1.3.x-5.6.x 2.4.x-5.6.x 5.0.x-5.6.x 5.2.x 5.2.x 5.2.x 1.3.x-5.6.x 2.4.x-5.6.x 5.0.x-5.6.x 5.3.x 5.3.x 5.3.x 1.3.x-5.6.x 2.4.x-5.6.x 5.0.x-5.6.x 5.4.x 5.4.x 5.4.x 1.3.x-5.6.x 2.4.x-5.6.x 5.0.x-5.6.x 5.5.x 5.5.x 5.5.x 1.3.x-5.6.x 2.4.x-5.6.x 5.0.x-5.6.x 5.6.x 5.6.x 5.6.x 1.3.x-6.0.x 2.4.x-6.0.x 5.0.x-6.0.x 6.0.x 6.0.x 6.0.x 5.6.x-6.8.x 5.6.x-6.8.x 6.0.x-6.8.x 6.1.x 6.1.x 6.1.x 5.6.x-6.8.x 5.6.x-6.8.x 6.0.x-6.8.x 6.2.x 6.2.x 6.2.x 5.6.x-6.8.x 5.6.x-6.8.x 6.0.x-6.8.x 6.2.x-6.8.x 6.3.x 6.3.x N/A** 5.6.x-6.8.x 5.6.x-6.8.x 6.0.x-6.8.x 6.2.x-6.8.x 6.4.x 6.4.x N/A** 5.6.x-6.8.x 5.6.x-6.8.x 6.0.x-6.8.x 6.2.x-6.8.x 6.5.x 6.5.x N/A** 5.6.x-6.8.x 5.6.x-6.8.x 6.0.x-6.8.x 6.2.x-6.8.x 6.6.x 6.6.x N/A** 5.6.x-6.8.x 5.6.x-6.8.x 6.0.x-6.8.x 6.2.x-6.8.x 6.7.x 6.7.x N/A** 5.6.x-6.8.x 5.6.x-6.8.x 6.0.x-6.8.x 6.2.x-6.8.x 6.8.x 6.8.x N/A** 5.6.x-6.8.x 5.6.x-6.8.x 6.0.x-6.8.x 6.2.x-6.8.x 7.0.x 7.0.x N/A** 6.8.x-7.4.x 6.8.x-7.4.x 6.8.x-7.4.x 7.0.x-7.4.x* 7.1.x 7.1.x N/A** 6.8.x-7.4.x 6.8.x-7.4.x 6.8.x-7.4.x 7.0.x-7.4.x* 7.2.x 7.2.x N/A** 6.8.x-7.4.x 6.8.x-7.4.x 6.8.x-7.4.x 7.0.x-7.4.x* 7.2.x 7.3.x 7.3.x N/A** 6.8.x-7.4.x 6.8.x-7.4.x 6.8.x-7.4.x 7.0.x-7.4.x* 7.3.x 7.4.x 7.4.x N/A** 6.8.x-7.4.x 6.8.x-7.4.x 6.8.x-7.4.x 7.0.x-7.4.x* 7.4.x kibana国内下载地址 jdk环境安装 在 /etc/profile 文件下添加以下配置 # jdk config JAVA_HOME=/usr/java/jdk1.8.0_241-amd64 JRE_HOME=/usr/java/jdk1.8.0_241-amd64/jre export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH 新建用户 sudo mkdir /home/user_group/ sudo groupadd user_group sudo useradd elasticsearch -g user_group -p elasticsearch passwd elasticsearch es es 不能使用TAB键、上下键，命令行不显示当前路径的解决 因默认ubuntu创建的普通帐号，默认shell为/bin/sh，而这不支持tab等键的，所以将「指定用户」帐号的shell改为/bin/bash就可以了。 >>> echo $SHELL /bin/sh >>> usermod -s /bin/bash 用户名 es配置 解压后进入目录，配置elasticsearch内外网可访问以及端口绑定 cd elasticsearch-6.8.7 vi ./config/elasticsearch.yml 在最后面加上 network.host: 0.0.0.0 http.port: 9200 保存退出，这个时候直接运行 ./bin/elasticsearch会报错 bound or publishing to a non-loopback address, enforcing bootstrap checks 重新切回root用户 su root 编辑 /etc/security/limits.conf，追加以下内容 * soft nofile 65536 * hard nofile 65536 此文件修改后需要重新登录用户，才会生效 编辑 /etc/sysctl.conf，追加以下内容： vm.max_map_count=655360 保存后，执行： sysctl -p 启动 切回新建的用户回到elasticsearch目录下 elasticsearch@hyc:/media/hyc/linux/elementary os/software/elasticsearch-6.7.1$ source /etc/profile elasticsearch@hyc:/media/hyc/linux/elementary os/software/elasticsearch-6.7.1$ echo $JAVA_HOME /usr/java/jdk1.8.0_241-amd64 elasticsearch@hyc:/media/hyc/linux/elementary os/software/elasticsearch-6.7.1$ ./bin/elasticsearch warning: Falling back to java on path. This behavior is deprecated. Specify JAVA_HOME [2020-08-08T13:14:40,834][INFO ][o.e.e.NodeEnvironment ] [EsTp_cx] using [1] data paths, mounts [[/media/hyc/linux (/dev/sdb6)]], net usable_space [545.8gb], net total_space [999.9gb], types [fuseblk] [2020-08-08T13:14:40,836][INFO ][o.e.e.NodeEnvironment ] [EsTp_cx] heap size [989.8mb], compressed ordinary object pointers [true] [2020-08-08T13:14:40,839][INFO ][o.e.n.Node ] [EsTp_cx] node name derived from node ID [EsTp_cxdSjehAblsJRe8tA]; set [node.name] to override [2020-08-08T13:14:40,840][INFO ][o.e.n.Node ] [EsTp_cx] version[6.7.1], pid[934], build[default/tar/2f32220/2019-04-02T15:59:27.961366Z], OS[Linux/5.4.0-42-generic/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_241/25.241-b07] [2020-08-08T13:14:40,840][INFO ][o.e.n.Node ] [EsTp_cx] JVM arguments [-Xms1g, -Xmx1g, -XX:+UseConcMarkSweepGC, -XX:CMSInitiatingOccupancyFraction=75, -XX:+UseCMSInitiatingOccupancyOnly, -Des.networkaddress.cache.ttl=60, -Des.networkaddress.cache.negative.ttl=10, -XX:+AlwaysPreTouch, -Xss1m, -Djava.awt.headless=true, -Dfile.encoding=UTF-8, -Djna.nosys=true, -XX:-OmitStackTraceInFastThrow, -Dio.netty.noUnsafe=true, -Dio.netty.noKeySetOptimization=true, -Dio.netty.recycler.maxCapacityPerThread=0, -Dlog4j.shutdownHookEnabled=false, -Dlog4j2.disable.jmx=true, -Djava.io.tmpdir=/tmp/elasticsearch-5133240268811839837, -XX:+HeapDumpOnOutOfMemoryError, -XX:HeapDumpPath=data, -XX:ErrorFile=logs/hs_err_pid%p.log, -XX:+PrintGCDetails, -XX:+PrintGCDateStamps, -XX:+PrintTenuringDistribution, -XX:+PrintGCApplicationStoppedTime, -Xloggc:logs/gc.log, -XX:+UseGCLogFileRotation, -XX:NumberOfGCLogFiles=32, -XX:GCLogFileSize=64m, -Des.path.home=/media/hyc/linux/elementary os/software/elasticsearch-6.7.1, -Des.path.conf=/media/hyc/linux/elementary os/software/elasticsearch-6.7.1/config, -Des.distribution.flavor=default, -Des.distribution.type=tar] [2020-08-08T13:14:42,612][INFO ][o.e.p.PluginsService ] [EsTp_cx] loaded module [aggs-matrix-stats] [2020-08-08T13:14:42,613][INFO ][o.e.p.PluginsService ] [EsTp_cx] loaded module [analysis-common] ．．．．．．． [2020-08-08T13:14:51,868][INFO ][o.e.c.m.MetaDataIndexTemplateService] [EsTp_cx] adding template [.monitoring-alerts] for index patterns [.monitoring-alerts-6] [2020-08-08T13:14:51,942][INFO ][o.e.c.m.MetaDataIndexTemplateService] [EsTp_cx] adding template [.monitoring-kibana] for index patterns [.monitoring-kibana-6-*] [2020-08-08T13:14:52,103][INFO ][o.e.l.LicenseService ] [EsTp_cx] license [08975435-c155-421d-ae6f-290e44abae0b] mode [basic] - valid 后台启动 ./bin/elasticsearch -d 访问 http://192.168.0.102:9200/ { \"name\" : \"EsTp_cx\", \"cluster_name\" : \"elasticsearch\", \"cluster_uuid\" : \"TKaUQKssQlODq4xfwdaQ1Q\", \"version\" : { \"number\" : \"6.7.1\", \"build_flavor\" : \"default\", \"build_type\" : \"tar\", \"build_hash\" : \"2f32220\", \"build_date\" : \"2019-04-02T15:59:27.961366Z\", \"build_snapshot\" : false, \"lucene_version\" : \"7.7.0\", \"minimum_wire_compatibility_version\" : \"5.6.0\", \"minimum_index_compatibility_version\" : \"5.0.0\" }, \"tagline\" : \"You Know, for Search\" } kibana安装 设置kibana环境变量 sudo gedit /etc/profile 添加 KIBANA_HOME=/home/tq/kibana-5.6.5-linux-x86_64 PATH=$KIBANA_HOME:$PATH export KIBANA_HOME 运行kibana ./bin/kibana 访问kibana http://127.0.0.1:5601 安装head 修改elasticsearch.yml，增加跨域的配置(需要重启es才能生效) vi /etc/elasticsearch/elasticsearch.yml # 加入配置: http.cors.enabled: true http.cors.allow-origin: \"*\" 修改Gruntfile.js文件，修改服务监听地址（增加hostname属性，将其值设置为'0.0.0.0’） 92行添加：hostname:'0.0.0.0', watch: { \"scripts\": { files: ['src/**/*', 'test/spec/*' ], tasks: ['default'], options: { spawn: false } }, \"grunt\": { files: [ 'Gruntfile.js' ] } }, connect: { server: { options: { hostname:'0.0.0.0', port: 9100, base: '.', keepalive: true } } } }); grunt.loadNpmTasks('grunt-contrib-clean'); 远程桌面rdesktop 首先安装rdesktop工具 kevin@bobo:~$ sudo apt-get install rdesktop 默认端口是3389 注意：远程windows机器的服务中的 Terminal Servies 需要开启。即：我的电脑-右键-属性-远程中，勾选 允许远程用户链接到此计算机。 针对rdesktop命令的参数解释： -f 全屏 -a 16位色,可选，不过最高就是16位 -u xxxxxx 登录用户，可选 -p xxxxxx 登录密码，可选 -r clipboard:PRIMARYCLIPBOARD 重要，剪贴板可以与远程桌面交互 -z 压缩，可选 -g 1024x768 分辨率，可选，缺省是一种比当前本地桌面低的分辨率 -P 缓冲，可选 -r disk:wj=/home/magicgod 映射虚拟盘，可选，会在远程机器的网上邻居里虚拟出一个映射盘，功能很强，甚至可以是软盘或光盘 -r sound:off 关闭声音，当然也可以把远程发的声音映射到本地来。 特别注意：rdesktop退出全屏模式 ：使用组合键ctrl+alt+enter进行切换；上面脚本执行后，发现全屏不了，明明已经加了-f参数，这是因为加了\"-g 1024x768\"的分辨率参数，去掉这个分辨率参数就可以实现全屏了！ 此外，Ubuntu除了上面的rdesktop命令进行远程连接操作外，还可以使用自带的Remmina进行ssh、VNC、RDP(连接windows机器)远程连接。 迅雷 需要软件：Ktorent, Amule 安装软件： sudo apt-get install ktorrent sudo apt-get install amule chrome插件 破解VIP会员视频集合 Tampermonkey gitzip for github octotree CNKI PDF Download 其他技巧 自动挂载磁盘 查看磁盘属性 hyc@hyc:~/Downloads$ blkid /dev/sda1: LABEL=\"M-fM-^AM-\\\"M-eM-$M-^M\" UUID=\"C43C21073C20F5D8\" TYPE=\"ntfs\" PARTLABEL=\"Basic data partition\" PARTUUID=\"28719635-d995-4e4f-8842-d4dadf1de022\" /dev/sda2: UUID=\"D621-7B3A\" TYPE=\"vfat\" PARTLABEL=\"EFI system partition\" PARTUUID=\"2aa389ac-d040-4070-92bc-b6840310b686\" /dev/sda4: LABEL=\"local\" UUID=\"286C27576C271F56\" TYPE=\"ntfs\" PARTLABEL=\"Basic data partition\" PARTUUID=\"4ad76de5-bf50-4f27-8abf-8f880eb4b4c7\" /dev/sda5: UUID=\"A64A3E1F4A3DED25\" TYPE=\"ntfs\" PARTUUID=\"7e64d242-e149-4910-b732-ecb02266b48d\" /dev/sda6: UUID=\"2c1a9fc5-6017-4802-bb17-1b697eb4ba39\" TYPE=\"swap\" PARTUUID=\"a028e7db-32f0-4298-b259-cb0245a9151e\" /dev/sda7: UUID=\"03fe0c70-4d06-4023-94fb-d3af41cefee6\" TYPE=\"ext4\" PARTUUID=\"754efc8f-c0f9-40c6-8eae-bfe61b029ba6\" /dev/sdb2: LABEL=\"download\" UUID=\"5A26CFCB26CFA5FB\" TYPE=\"ntfs\" PARTLABEL=\"Basic data partition\" PARTUUID=\"ee7174a3-6cc8-407b-9a9f-ead9f3ce85f0\" /dev/sdb3: LABEL=\"software\" UUID=\"22BACF07BACED707\" TYPE=\"ntfs\" PARTLABEL=\"Basic data partition\" PARTUUID=\"8b742348-2ef4-429e-8a02-76a6e0f49f44\" /dev/sdb4: LABEL=\"qoding\" UUID=\"428AE1638AE153C7\" TYPE=\"ntfs\" PARTLABEL=\"Basic data partition\" PARTUUID=\"511c889e-d4ba-46b0-8df6-c9e360268abb\" /dev/sdb5: LABEL=\"student\" UUID=\"420EF5340EF52199\" TYPE=\"ntfs\" PARTLABEL=\"Basic data partition\" PARTUUID=\"3349a79c-d864-41ab-8bde-5f65172d9e5a\" /dev/sdb6: LABEL=\"linux\" UUID=\"702AA8C82AA88D22\" TYPE=\"ntfs\" PARTLABEL=\"Basic data partition\" PARTUUID=\"696e0d44-726d-455b-ae87-f55db96bd6d3\" /dev/sdb7: LABEL=\"entertainment\" UUID=\"009CAE0B9CADFB74\" TYPE=\"ntfs\" PARTLABEL=\"Basic data partition\" PARTUUID=\"78cf7f18-0257-45f8-8fb4-aa49567f54c1\" 添加挂载项 hyc@hyc:~/Downloads$ sudo gedit /etc/fstab 在末尾添加，/media/hyc路径需要提前创建　qoding是挂载后的名字，自动会创建 /dev/sdb4 /media/hyc/qoding ntfs defaults 0 0 /dev/sdb6 /media/hyc/linux ntfs defaults 0 0 ssh到服务器 ssh root@http://112.126.102.142:22 退出远程用logout Copyright © narutohyc.com 2021 all right reserved，powered by Gitbook该文件修订时间： 2023-09-07 09:09:57 new Valine({el: \"#vcomments\",appId: 'evyLlP61gQN3G3OM2GQq1rzH-gzGzoHsz',appKey: 'utUrzoiqNaDEGlgr09JL1pXB',placeholder: '欢迎留下评论交流~',avatar: 'wavatar',meta: undefined,pageSize: 15,lang: 'zh-CN',recordIP: false}) "},"chapters/5.gitbook博客搭建.html":{"url":"chapters/5.gitbook博客搭建.html","title":"gitbook博客搭建","keywords":"","body":"gitbook环境搭建初始化电子书重要文件markdown语法改造访客数valine美化部署github pagesgitee pages gitbook 使用 Gitbook 打造你的电子书 gitbook官网 环境搭建 nodejs 官网下载，这里可以选择12.16.1版本，太新的版本后面可能会出现奇怪的问题，这是笔者使用的版本 执行以下命令安装gitbook命令 npm install -g gitbook-cli # 查看是否安装完成, 能正确显示版本号就行，这里推荐gitBook==3.2.3 gitbook -V CLI version: 2.3.2 GitBook version: 3.2.3 初始化电子书 初始化电子书 gitbook init 这时候会生成下面两个文件README.md和SUMMARY.md README.md 书籍的介绍写在这个文件里；SUMMARY.md书籍的目录结构在这里配置 安装插件 有配置book.json时，执行gitbook install会安装插件到node_modules目录 使用以下命令启动gitbook，打开http://localhost:4000就可以访问了， gitbook serve 重要文件 book.json，没有的话，自己新建一个就好 用于配置插件和书籍的基本信息 { \"title\": \"书籍目录\", \"author\": \"narutohyc\", \"description\": \"书籍目录，记录一些工作和学习中的笔记\", \"language\": \"zh-hans\", \"structure\": { \"readme\": \"README.md\" }, \"links\": { \"sidebar\": { \"我の小窝~\": \"https://github.com/narutohyc\" } }, \"plugins\": [ \"-sharing\", \"splitter\", \"expandable-chapters-small\", \"anchors\", \"github\", \"github-buttons\", \"donate\", \"sharing-plus\", \"anchor-navigation-ex\", \"mathjax\", \"mermaid-gb3\", \"tbfed-pagefooter\", \"code\", \"search-plus\", \"-lunr\", \"-search\", \"lightbox\", \"theme-comscore\", \"valine\", \"pageview-count\", \"favicon-absolute\", \"copyright-v\" ], \"pluginsConfig\": { \"theme-default\": { \"showLevel\": true }, \"github\": { \"url\": \"https://github.com/narutohyc\" }, \"tbfed-pagefooter\": { \"copyright\": \"Copyright © narutohyc.com 2021\", \"modify_label\": \"该文件修订时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" }, \"github-buttons\": { \"buttons\": [{ \"user\": \"narutohyc\", \"repo\": \"bk_index\", \"type\": \"star\", \"size\": \"small\", \"count\": true } ] }, \"donate\": { \"wechat\": \"https://s2.loli.net/2022/03/23/WDiTVSamQBJdEA4.png\", \"alipay\": \"https://s2.loli.net/2022/03/23/dEYjkaSGXwe7rnu.png\", \"title\": \"\", \"button\": \"欢迎打赏\", \"alipayText\": \"alipay打赏\", \"wechatText\": \"wechat打赏\" }, \"sharing\": { \"douban\": true, \"facebook\": true, \"google\": true, \"hatenaBookmark\": false, \"instapaper\": false, \"line\": false, \"linkedin\": false, \"messenger\": false, \"pocket\": false, \"qq\": true, \"qzone\": true, \"stumbleupon\": false, \"twitter\": true, \"viber\": false, \"vk\": false, \"weibo\": true, \"whatsapp\": false, \"all\": [ \"google\", \"facebook\", \"weibo\", \"twitter\", \"qq\", \"qzone\", \"linkedin\", \"pocket\" ] }, \"anchor-navigation-ex\": { \"showLevel\": false }, \"valine\": { \"appId\": \"leancloud申请的appId\", \"appKey\": \"leancloud申请的appKey\", \"avatar\": \"wavatar\", \"placeholder\": \"欢迎留下评论交流~\", \"pageSize\": 15 }, \"favicon-absolute\":{ \"favicon\": \"./chapters/res/other/favicon.ico\", \"appleTouchIconPrecomposed152\": \"./chapters/res/other/favicon.ico\" }, \"fontSettings\": { \"family\": \"msyh\", \"size\": 2 }, \"copyright-v\": { \"site\": \"https://hycbook.github.io/bk_python/\", \"author\": \"narutohyc\", \"website\": \"python元知识驿站\", \"image\": \"https://s2.loli.net/2022/03/24/pbMd1BCgUNzi7mG.png\", \"copyProtect\": true, \"enableFooter\": false } } } Gitbook 默认带有 5 个插件： highlight search sharing font-settings livereload 重要插件说明: github: 右上角添加github图标 donate: 文章打赏插件，在文末点击展示付款码 sharing-plus: 比默认的分享插件，多了更多的分享按钮 mathjax: LaTeX公式显示插件，可以支持绝大多数的数据公式，个别的公式还是会有问题 mermaid-gb3: Mermaid渲染插件，可以支持画图 code: 为代码块添加行号和复制按钮，复制按钮可关闭，单行代码无行号 search-plus: 文章内容搜索插件，支持中文，使用这个插件时要移除默认的lunr和search插件 lightbox: 当前页显示大图，点击图片会放大显示，不支持切换图片 theme-comscore: 主题插件，默认主题是黑白的，comscore 主题是彩色的，标题和正文颜色有所区分 valine: 诞生于2017年8月7日，是一款基于LeanCloud的快速、简洁且高效的无后端评论系统 pageview-count: 页面浏览量统计，但好像用不了，自己结合cutercounter进行了改造 favicon-absolute: 网页icon图标定义 copyright-v: 版权插件，复制文章内容时会附带上定义好的版权信息，和知乎复制的效果一样 .bookignore，存放不想被打包的资源 .gitignore .bookignore book_default.json _book/chapters/*.md *.bat *.pdf _book 使用gitbook build命令，会在项目的目录下生成一个 _book 目录，里面的内容为静态站点的资源文件 发布出来的就是这个目录下的资源 gitbook build只负责生成静态文件，gitbook serve不仅生成文件，还会启动网站服务 使用选项 --log=debug 和 --debug 来获取更好的错误消息 gitbook build ./ --log=debug --debug SUMMARY.md，用于存放数据目录 # Summary * [Introduction](README.md) * [alicloud_deployment](./chapters/1.alicloud_deployment.md) * [reinstall_the_system](./chapters/2.reinstall_the_system.md) * [Linux常用命令](./chapters/3.Linux常用命令.md) * [github协作](./chapters/4.github协作.md) * [gitbook博客搭建](./chapters/5.gitbook博客搭建.md) node_modules 终端执行gitbook install可以安装book.json配置的插件，下载的插件会在node_modules文件夹 markdown语法 基本撰写和格式语法 Markdown是一种轻量级标记语言，创始人是约翰·格鲁伯(John Gruber) 它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的 HTML 文档 推荐配合Typora编辑器一起食用 改造 访客数 valine 博客Valine评论样式美化 美化 部署 打造完美写作系统：Gitbook+Github Pages+Github Actions Travis CI简介 什么是持续集成(CI)/持续交付(CD)管道？ GitHub Actions GitHub Actions 是什么？ 前面部分的内容主要讲解了gitbook的构建和美化优化等内容 这部分讲一下如何借助github pages和gitee pages部署自己的博客网站，正文开始前，先讲解下Github Actions的基础概念 Github Actions CI/CD: 持续集成(CI)/持续交付(CD)管道是一系列步骤，其中包括从CI/CD流程开始的所有阶段，并负责创建自动化和无缝的软件交付。而使用CI/CD管道，软件发布工件可以从代码检入阶段到测试、构建、部署和生产阶段一直在管道中前进 这一概念之所以强大，是因为一旦指定了管道，就可以将其部分或全部实现自动化，从而加快了流程，并减少了错误。换句话说，CI/CD管道使组织每天更轻松地自动多次交付软件 Travis CI: 提供的是持续集成服务（Continuous Integration，简称 CI）。它绑定 Github 上面的项目，只要有新的代码，就会自动抓取。然后，提供一个运行环境，执行测试，完成构建，还能部署到服务器 Github Actions: GitHub Actions是你在GitHub库中创建自定义的工作流，工作流指的就是自动化的流程，比如构建、测试、打包、发布、部署等等，可以设置触发条件或定时执行，由github提供服务器环境 查看个人帐户的 GitHub Actions 使用情况 在任何页面的右上角，单击个人资料照片，然后单击“设置” 在侧边栏的“访问”部分，单击“ 计费和计划”，然后单击“计划和使用情况” 在“本月使用情况”下的“操作”部分中，查看所用分钟数的详细信息 可以展开此部分，按运行器类型显示使用情况的明细 在“用于操作和包的存储”下，查看用于 GitHub Actions 和 GitHub Packages 的存储使用详情。 存储使用数据每小时同步一次 （可选）在“本月使用情况”旁边，单击“获取使用情况报告”向帐户主电子邮件地址发送关于 GitHub Actions 和 GitHub Packages 存储使用情况的 CSV 报告 持续集成(CI)/持续交付(CD)是一种自动化管理流程，而Travis CI和Github Actions都是具体的实现，后者是github官方提供的 githun actions的使用案例可以自己百度或参考github协作 github pages GitHub Pages Deploy Action 自动发布到github pages分支(可以自己设置分支) 配置token github项目下新建：name=TOKEN，value=github生成的token 基本用法 - name: Deploy #步骤4：把编译好的静态目录上传到gh-pages分支上 uses: JamesIves/github-pages-deploy-action@3.1.5 #这里调用第三方依赖，用于上传代码到指定分支上 with: ACCESS_TOKEN: ${{ secrets.TOKEN }} BRANCH: gh-pages #github pages 默认的分支 FOLDER: _book #上传文件的目录，我这个目录在根目录下，如果是子目录可以这么写 docs/.vuepress/dist gitee pages Gitee 如何自动部署 Pages？还是用 GitHub Actions! 使用 GitHub Actions 解决了 GitHub 代码自动同步 Gitee 的问题，但我们的博客仓库代码同步到 Gitee 后，并不能像 GitHub 一样自动部署 Pages，如果不使用付费的 Gitee Pages Pro 服务，那我们该怎么实现 Gitee 自动部署 Pages 呢 基本用法 新建一个name=GITEE_PASSWORD, value=gitee登陆密码的secrets - name: Build Gitee Pages uses: yanglbme/gitee-pages-action@main with: # 注意替换为你的 Gitee 用户名 gitee-username: narutohyc # 注意在 Settings->Secrets 配置 GITEE_PASSWORD gitee-password: ${{ secrets.GITEE_PASSWORD }} # 注意替换为你的 Gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错 gitee-repo: hycBook/bk_index # 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在） branch: gh-pages Copyright © narutohyc.com 2021 all right reserved，powered by Gitbook该文件修订时间： 2023-09-07 09:09:57 new Valine({el: \"#vcomments\",appId: 'evyLlP61gQN3G3OM2GQq1rzH-gzGzoHsz',appKey: 'utUrzoiqNaDEGlgr09JL1pXB',placeholder: '欢迎留下评论交流~',avatar: 'wavatar',meta: undefined,pageSize: 15,lang: 'zh-CN',recordIP: false}) "},"chapters/4.github协作.html":{"url":"chapters/4.github协作.html","title":"github协作","keywords":"","body":"github协作Fork 方式Organizations方式准备项目开始协作合作者githun actionsgithub同步gitee部署github pages发布releasebuild gitee pagesgithub基本命令gitlab runner下载安装注册runner挂载.gitlab-ci.yml github协作 GitHub 多人协作开发三种方式 Fork 方式 暂无 Organizations方式 准备项目 新建组织(创建免费的即可，有每月免费2000分钟) 创建team(不建也是可以，建了容易管理) 添加team成员，在组织下选择team，给team拉队友，队友收到邮件后，同意了就可以加入 仓库转入(原来已有的仓库，进入仓库选择settings，下滑选Transfer)或在新建项目 为组织下的仓库添加合作者，配置权限 设置主分支保护，不让其他人直接push到主分支，打开仓库下的settings，选择branchs 添加Branch protection rules 开始协作 协作者在组织下找到对应的仓库，克隆仓库到本地 git clone git@github.com:hycBook/bk_python.git 开始编写，完成后提交至新分支，一般命名为dev_xxx 新分支创建一次就可以，commit之后，再push到自己的dev_xxx分支 注意：在修改文件之前一般是先从主分支拉取最新内容，修改完成后尽早提交，较少冲突 commit和push操作都是在自己的dev_xxx分支，pull操作是从主分支来 到github界面，选择Pull requests，在选择New pull request，选择分支 提交合并请求后，等待合并即可 合作者 暂无 githun actions Github Actions 是 Github 推出的自动化构建工具，一般来说，CI / CD （持续集成 / 持续部署）都需要自己的计算资源，但 Github Actions 提供免费的计算资源，这是它的优势之一，用户只用操心 workflow 文件，不用关心环境相关的琐碎，便可部署 CI / CD，加速了流程。 在 GitHub Actions 中，一次执行过程被称为一个 workflow，一个 workflow 中可以有一个或者多个 job，job 又由 step 组成，step 中可以执行 action，就是一条条命令 github同步gitee Hub Mirror Action 一个用于在hub间（例如Github，Gitee）账户代码仓库同步的action 准备步骤 本地生成公钥和秘钥 ssh-keygen -t -C \"1832044043@qq.com\" 公钥放在gitee github项目下新建：name=GITEE_PRIVATE_KEY，value=秘钥 gitee生成token github项目下新建：name=GITEE_TOKEN，value=gitee生成的token 基本用法 steps: - name: Sync Github Repos To Gitee # 名字随便起 uses: Yikun/hub-mirror-action@master # 使用Yikun/hub-mirror-action with: src: github/hycBook # 源端账户名(github),如果是组织的话要用组织名,此时account_type=org dst: gitee/hycBook # 目的端账户名(gitee),如果是组织的话要用组织名,此时account_type=org dst_key: ${{ secrets.GITEE_PRIVATE_KEY }} # SSH密钥对中的私钥 dst_token: ${{ secrets.GITEE_TOKEN }} # Gitee账户的私人令牌 account_type: org # 账户类型, # clone_style: \"ssh\" # 使用https方式进行clone，也可以使用ssh debug: true # 启用后会显示所有执行命令 force_update: true # 启用后，强制同步，即强制覆盖目的端仓库 static_list: \"bk_index\" # 静态同步列表，在此填写需要同步的仓库名称，可填写多个 timeout: '660s' # git超时设置，超时后会自动重试git操作 必选参数 src 需要被同步的源端账户名，如github/kunpengcompute，表示Github的kunpengcompute账户。 dst 需要同步到的目的端账户名，如gitee/kunpengcompute，表示Gitee的kunpengcompute账户。 dst_key 用于在目的端上传代码的私钥(默认可以从~/.ssh/id_rsa获取），可参考生成/添加SSH公钥或generating SSH keys生成，并确认对应公钥已经被正确配置在目的端。对应公钥，Github可以在这里配置，Gitee可以这里配置。 dst_token 创建仓库的API tokens， 用于自动创建不存在的仓库，Github可以在这里找到，Gitee可以在这里找到。 可选参数 account_type 默认为user，源和目的的账户类型，可以设置为org（组织）或者user（用户），该参数支持同类型账户（即组织到组织，或用户到用户）的同步。如果源目的仓库是不同类型，请单独使用src_account_type和dst_account_type配置。 src_account_type 默认为account_type，源账户类型，可以设置为org（组织）或者user（用户）。 dst_account_type 默认为account_type，目的账户类型，可以设置为org（组织）或者user（用户）。 clone_style 默认为https，可以设置为ssh或者https。当设置为ssh时，你需要将dst_key所对应的公钥同时配置到源端和目的端。 cache_path 默认为'', 将代码缓存在指定目录，用于与actions/cache配合以加速镜像过程。 black_list 默认为'', 配置后，黑名单中的repos将不会被同步，如“repo1,repo2,repo3”。 white_list 默认为'', 配置后，仅同步白名单中的repos，如“repo1,repo2,repo3”。 static_list 默认为'', 配置后，仅同步静态列表，不会再动态获取需同步列表（黑白名单机制依旧生效），如“repo1,repo2,repo3”。 force_update 默认为false, 配置后，启用git push -f强制同步，注意：开启后，会强制覆盖目的端仓库。 debug 默认为false, 配置后，启用debug开关，会显示所有执行命令。 timeout 默认为'30m', 用于设置每个git命令的超时时间，'600'=>600s, '30m'=>30 mins, '1h'=>1 hours mappings 源仓库映射规则，比如'A=>B, C=>CC', A会被映射为B，C会映射为CC，映射不具有传递性。主要用于源和目的仓库名不同的镜像。 部署github pages GitHub Pages Deploy Action 自动发布到github pages分支(可以自己设置分支) 配置token github项目下新建：name=TOKEN，value=github生成的token 基本用法 - name: Deploy #步骤4：把编译好的静态目录上传到gh-pages分支上 uses: JamesIves/github-pages-deploy-action@3.1.5 #这里调用第三方依赖，用于上传代码到指定分支上 with: ACCESS_TOKEN: ${{ secrets.TOKEN }} BRANCH: gh-pages #github pages 默认的分支 FOLDER: _book #上传文件的目录，我这个目录在根目录下，如果是子目录可以这么写 docs/.vuepress/dist 发布release action-automatic-releases@latest 自动创建release，并发布 基本用法 - name: Create GitHub release uses: marvinpinto/action-automatic-releases@latest with: repo_token: ${{ secrets.TOKEN }} automatic_release_tag: 'ebook_index' # 发布标签 title: ${{ env.ReleaseVersion }} prerelease: false files: | _ebook/* # 发布的目录 build gitee pages Gitee 如何自动部署 Pages？还是用 GitHub Actions! 使用 GitHub Actions 解决了 GitHub 代码自动同步 Gitee 的问题，但我们的博客仓库代码同步到 Gitee 后，并不能像 GitHub 一样自动部署 Pages，如果不使用付费的 Gitee Pages Pro 服务，那我们该怎么实现 Gitee 自动部署 Pages 呢 基本用法 新建一个name=GITEE_PASSWORD, value=gitee登陆密码的secrets - name: Build Gitee Pages uses: yanglbme/gitee-pages-action@main with: # 注意替换为你的 Gitee 用户名 gitee-username: narutohyc # 注意在 Settings->Secrets 配置 GITEE_PASSWORD gitee-password: ${{ secrets.GITEE_PASSWORD }} # 注意替换为你的 Gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错 gitee-repo: hycBook/bk_index # 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在） branch: gh-pages github 基本命令 强制覆盖本地文件 git fetch --all git reset --hard origin/master git pull # 单条执行 git fetch --all && git reset --hard origin/master && git pull gitlab runner GitLab Runner 介绍 GitLab Runner是一个开源项目，用于运行您的作业并将结果发送回GitLab。它与GitLab CI一起使用，GitLab CI是GitLab随附的开源持续集成服务，用于协调作业 GitLab Runner是用Go编写，可以作为单个二进制文件运行，不需要语言特定的要求 GitLab Runner的三种类型 shared：运行整个平台项目的作业(gitlab) group：运行特定group下的所有项目的作业(group) specific：运行指定的项目作业(project) 下载安装 下载安装 Install GitLab Runner manually on GNU/Linux(依赖docker) linux手动 curl -LJO \"https://gitlab-runner-downloads.s3.amazonaws.com/latest/rpm/gitlab-runner_amd64-fips.rpm\" chomd 777 gitlab-runner_amd64-fips.rpm rpm -i gitlab-runner_amd64-fips.rpm docker方式 Run GitLab Runner in a container 注册runner gitlab runner 注册 点击用户管理--左边点击runner，可以看到界面右边有gitlab的地址和token。这个需要用于后面runner的注册使用 (base) [root@FDBL ~]# sudo gitlab-runner register INFO[0000] Binary was compiled with FIPS mode, but an external SSL library was not enabled. Runtime platform arch=amd64 os=linux pid=5898 revision=8ec04662 version=16.3.0 Running in system-mode. Enter the GitLab instance URL (for example, https://gitlab.com/): http://192.168.50.128 Enter the registration token: iqxKz5XTz4w_2RxiSQ5S Enter a description for the runner: [FDBL]: for python project Enter tags for the runner (comma-separated): py310 Enter optional maintenance note for the runner: WARNING: Support for registration tokens and runner parameters in the 'register' command has been deprecated in GitLab Runner 15.6 and will be replaced with support for authentication tokens. For more information, see https://gitlab.com/gitlab-org/gitlab/-/issues/380872 Registering runner... succeeded runner=tKejdsiT Enter an executor: instance, kubernetes, custom, parallels, shell, virtualbox, docker+machine, docker, docker-windows, ssh, docker-autoscaler: docker Enter the default Docker image (for example, ruby:2.7): python:3.10 Runner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded! 如果是docker的方式 [root@localhost config]# docker exec -it gitlab-runner bash root@24dc60abee0b:/# gitlab-runner register # 同上 挂载 gitlab runner高级设置 打开/etc/gitlab-runner/config.toml，添加volumes配置 concurrent = 4 check_interval = 0 shutdown_timeout = 0 [session_server] session_timeout = 1800 [[runners]] name = \"for python project\" url = \"http://192.168.0.143\" id = 947 token = \"xxx\" token_obtained_at = 2023-08-21T02:17:13Z token_expires_at = 0001-01-01T00:00:00Z executor = \"docker\" [runners.cache] MaxUploadedArchiveSize = 0 [runners.docker] tls_verify = false image = \"centos:7\" privileged = false disable_entrypoint_overwrite = false oom_kill_disable = false disable_cache = false volumes = [\"/cache\", \"/home/pypi_packages:/var/pypi_packages\"] shm_size = 0 volumes是将/home/pypi_packages映射到/var/pypi_packages中，concurrent = 4表示并行的数量 修改成立即生效sudo gitlab-runner verify .gitlab-ci.yml .gitlab-ci.yml keyword reference gitlab--内置的环境变量、自定义环境变量 验证您的GitLab CI配置(语法检验) 实现一个自动化编译python，并将打包的好的发布到仓库，如果需要自定义变量可以用$env_name访问在CI/CD配置的变量 image: python:3.10 stages: - build build: stage: build script: - python setup.py sdist bdist_wheel - cp -R dist/* /var/pypi_packages/ - touch ~/.pypirc - 'echo \"[distutils]\" >> ~/.pypirc' - 'echo \"index-servers\" = >> ~/.pypirc' - 'echo \" local\" >> ~/.pypirc' - 'echo \"\" >> ~/.pypirc' - 'echo \"[local]\" >> ~/.pypirc' - 'echo \"repository: 192.168.xx.xx:8282\" >> ~/.pypirc' - 'echo \"username: $u_name\" >> ~/.pypirc' - 'echo \"password: $u_pd\" >> ~/.pypirc' # - python setup.py sdist bdist_wheel upload -r http://192.168.xx.xx:8282 # - pip install --extra-index-url http://192.168.xx.xx:8282/simple/ --trusted-host 192.168.xx.xx:8282 twine==4.0.2 # - twine upload dist/* artifacts: paths: - dist/ only: - dev # 或者您的主分支的名称，比如 \"master\" # 告诉 Runner 我们应用哪个标签 tags: - global_py310 #方式一 # - python setup.py sdist bdist_wheel # - cp -R dist/* /var/pypi_packages/ #方式二 # variables: # TWINE_USERNAME: $TWINE_USERNAME # TWINE_PASSWORD: $TWINE_PASSWORD # script: # - touch ~/.pypirc # - 'echo \"[distutils]\" >> ~/.pypirc' # - 'echo \"index-servers\" = >> ~/.pypirc' # - 'echo \" local\" >> ~/.pypirc' # - 'echo \"\" >> ~/.pypirc' # - 'echo \"[local]\" >> ~/.pypirc' # - 'echo \"repository: 192.168.xx.xx:8282\" >> ~/.pypirc' # - 'echo \"username: $u_name\" >> ~/.pypirc' # - 'echo \"password: $u_pd\" >> ~/.pypirc' # - python setup.py sdist bdist_wheel upload -r http://192.168.135.201:8282 #方式三 # - python setup.py sdist bdist_wheel # - pip install --extra-index-url http://192.168.135.201:8282/simple/ --trusted-host 192.168.135.201:8282 twine==4.0.2 # - twine upload dist/* Copyright © narutohyc.com 2021 all right reserved，powered by Gitbook该文件修订时间： 2023-09-07 09:09:57 new Valine({el: \"#vcomments\",appId: 'evyLlP61gQN3G3OM2GQq1rzH-gzGzoHsz',appKey: 'utUrzoiqNaDEGlgr09JL1pXB',placeholder: '欢迎留下评论交流~',avatar: 'wavatar',meta: undefined,pageSize: 15,lang: 'zh-CN',recordIP: false}) "},"chapters/7.md数学公式和emoji表情.html":{"url":"chapters/7.md数学公式和emoji表情.html","title":"md数学公式和emoji表情","summary":"md数学公式和emoji表情","keywords":"","body":"表情Latex公式通用符号上下标括号分数开方累加/累乘符号堆叠三角函数对数函数二元运算符关系符号极限向量箭头集合微积分逻辑运算上下标符号希腊字母省略号空格其他符号分支公式矩阵字体与颜色调整大小粗体斜体修改颜色花体字母 表情 ⚓表情网站 ⛪emoji表情官网 ⛺timwhitlock表情 &#x1F334;常用表情 &#x1F600; &#x1F603; &#x1F970; &#x1F60D; &#x1F618; ❤️ ✨ ⭐ ❗❓ ❕❔ ✊ ✌️ ✋ ✋ ☝️ &#x1F44F; &#x1F91D; ☀️ ☔ ☁️ ❄️ ⛄ ⚡ ⛅ ⛪ ⛺ ⛲ ⛵ ⛵ ⚓ ✈️ ⛽ ⚠️ ♨️ 1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 0️⃣ ️⃣ ◀️ ⬇️ ▶️ ⬅️ ↙️ ↘️ ➡️ ⬆️ ↖️ ↗️ ⏬ ⏫ ⤵️ ⤴️ ↩️ ↪️ ↔️ ↕️ ⏪ ⏩ ℹ️ ️ ️ ️ ♿ ㊙️ ㊗️ Ⓜ️ ⛔ ✳️ ❇️ ✴️ ♈ ♉ ♊ ♋ ♌ ♍ ♎ ♏ ♐ ♑ ♒ ♓ ⛎ ❎ ️ ️ ️ ♻️ ©️ ®️ ™️ ❌ ❗ ‼️ ⁉️ ⭕ ✖️ ➕ ➖ ➗ ✔️ ☑️ ➰ 〰️ 〽️ ▪️ ▫️ ◾ ◽ ◼️ ◻️ ⬛ ⬜ ✅ ⚫ ⚪ &#x1F33F; &#x1F343; &#x1F33E; &#x1F334; &#x1F332; &#x1F95D; &#x1F951; &#x1F347; &#x1F352; &#x1F350; &#x1F33C; &#x1F341; &#x1F96D; &#x1F338; &#x1F344; &#x1F40B; &#x1F42C; &#x1F436; &#x1F433; &#x1F430; &#x1F980; ☝️ ⭐ &#x1F449; &#x1F440; &#x1F31A; &#x1F31D; &#x1F9E1;ྀི &#x1F49B;ྀི ❤️ྀི ❤️ &#x1F308; &#x1F4AF; &#x1F43E; &#x1F36D; &#x1F942; &#x1F3BC; &#x1F3C0; &#x1F44F; Latex公式 Markdown 数学公式总结 &#x1F308;以下部分公式，hexo无法解析，可能需要装什么插件支持或者是修改源码，不太清楚，有谁知道的可以评论留言~ 通用符号 上下标 算式 markdown a_0, a_{pre} a0, a{pre} $ a^0, a^{[0]} $ a^0, a^{[0]} 括号 算式 markdown (,) (, ) [,] [, ] \\lang \\rang \\lang, \\rang 或 \\langle, \\rangle \\lvert , \\rvert \\lvert, \\rvert \\lVert, \\rVert \\lVert, \\rVert \\lbrace, \\rbrace \\lbrace, \\rbrace 或 {, } 增大括号方法如下表： 算式 markdown (x) (x) \\big( x \\big) \\big( x \\big) \\Big( x \\Big) \\Big( x \\Big) \\bigg( x \\bigg) \\bigg( x \\bigg) \\Bigg( x \\Bigg) \\Bigg( x \\Bigg) 取整符号 算式 markdown 结束 $\\lfloor x \\rfloor$ \\lfloor x \\rfloor 向下取整 $\\lceil x \\rceil$ \\lceil x \\rceil 向上取整 分数 算式 markdown \\frac{a}{b} \\frac{a}{b} 开方 算式 markdown \\sqrt{a + b} \\sqrt{a + b} \\sqrt[n]{a + b} \\sqrt[n]{a + b} 累加/累乘 算式 markdown \\sum_{i = 0}^{n}\\frac{1}{i^2} \\sum_{i = 0}^{n}\\frac{1}{i^2} \\prod_{i = 0}^{n}\\frac{1}{x^2} \\prod_{i = 0}^{n}\\frac{1}{x^2} 符号堆叠 算式 markdown 说明 \\overset {@} {ABC} \\overset {@} {ABC} 上堆叠 \\underset {@} {ABC} \\underset {@} {ABC} 下堆叠 X \\overset {a} { \\underset{b} { \\to } }Y X \\overset {a} { \\underset{b} { \\to } }Y 上下堆叠 三角函数 算式 markdown \\sin \\sin \\cos \\cos \\tan \\tan \\cot \\cot \\sec \\sec \\csc \\csc \\bot \\bot \\angle \\angle 40^\\circ 40^\\circ 对数函数 算式 markdown \\ln{a + b} \\ln{a + b} \\log_{a}^{b} \\log_{a}^{b} \\lg{a + b} \\lg{a + b} 二元运算符 算式 markdown 描述 \\pm \\pm 正负号 \\mp \\mp 负正号 \\times \\times 乘号 \\div \\div 除号 \\ast \\ast 星号 \\star \\star \\mid \\mid 竖线 \\nmid \\nmid \\circ \\circ 圈 \\bullet \\bullet \\cdot \\cdot 点 \\wr \\wr \\diamond \\diamond \\Diamond \\Diamond \\triangle \\triangle \\bigtriangleup \\bigtriangleup \\bigtriangledown \\bigtriangledown \\triangleleft \\triangleleft \\triangleright \\triangleright \\lhd \\lhd \\rhd \\rhd \\unlhd \\unlhd \\unrhd \\unrhd \\circ \\circ \\bigcirc \\bigcirc \\odot \\odot \\bigodot \\bigodot 点积 \\oslash \\oslash \\ominus \\ominus \\otimes \\otimes \\bigotimes \\bigotimes 克罗内克积 \\oplus \\oplus \\bigoplus \\bigoplus 异或 \\dagger \\dagger \\ddagger \\ddagger \\amalg \\amalg 关系符号 算式 markdown 描述 \\leq \\leq 小于等于 \\geq \\geq 大于等于 \\equiv \\equiv 全等于 \\models \\models \\prec \\prec \\succ \\succ \\sim \\sim \\perp \\perp \\preceq \\preceq \\succeq \\succeq \\simeq \\simeq \\mid \\mid \\ll \\ll \\gg \\gg \\asymp \\asymp \\parallel \\parallel \\approx \\approx \\cong \\cong \\neq \\neq 不等于 \\doteq \\doteq \\propto \\propto \\bowtie \\bowtie \\Join \\Join \\smile \\smile \\frown \\frown \\vdash \\vdash \\dashv \\dashv 极限 算式 markdown \\lim \\lim \\rightarrow \\rightarrow \\infty \\infty \\lim_{n\\rightarrow+\\infty}n \\lim_{n\\rightarrow+\\infty}n 向量 算式 markdown \\vec{a} \\vec{a} 箭头 算式 markdown \\uparrow \\uparrow \\downarrow \\downarrow \\updownarrow \\updownarrow \\Uparrow \\Uparrow \\Downarrow \\Downarrow \\Updownarrow \\Updownarrow \\rightarrow \\rightarrow \\leftarrow \\leftarrow \\leftrightarrow \\leftrightarrow \\Rightarrow \\Rightarrow \\Leftarrow \\Leftarrow \\Leftrightarrow \\Leftrightarrow \\longrightarrow \\longrightarrow \\longleftarrow \\longleftarrow \\longleftrightarrow \\longleftrightarrow \\Longrightarrow \\Longrightarrow \\Longleftarrow \\Longleftarrow \\Longleftrightarrow \\Longleftrightarrow \\mapsto \\mapsto \\longmapsto \\longmapsto \\hookleftarrow \\hookleftarrow \\hookrightarrow \\hookrightarrow \\rightharpoonup \\rightharpoonup \\leftharpoondown \\leftharpoondown \\rightleftharpoons \\rightleftharpoons \\leftharpoonup \\leftharpoonup \\rightharpoondown \\rightharpoondown \\leadsto \\leadsto \\nearrow \\nearrow \\searrow \\searrow \\swarrow \\swarrow \\nwarrow \\nwarrow 集合 算式 markdown 描述 \\emptyset 、\\varnothing \\emptyset或\\varnothing 空集 \\in \\in 属于 \\ni \\ni \\notin \\notin 不属于 \\subset \\subset 子集 \\supset \\supset \\not\\subset \\not\\subset 非子集 \\subseteq \\subseteq 真子集 \\supseteq \\supseteq \\cup \\cup 并集 \\bigcup \\bigcup 并集 \\cap \\cap 交集 \\bigcap \\bigcap 交集 \\uplus \\uplus 多重集 \\biguplus \\biguplus 多重集 \\sqsubset \\sqsubset \\sqsupset \\sqsupset \\sqcap \\sqcap \\sqsubseteq \\sqsubseteq \\sqsupseteq \\sqsupseteq \\vee \\vee \\wedge \\wedge \\setminus \\setminus 集合中的减法 微积分 算式 markdown 描述 \\prime \\prime \\int \\int 积分 \\iint \\iint 双重积分 \\iiint \\iiint 三重积分 \\oint \\oint 曲线积分 \\nabla \\nabla 梯度 \\int_0^2 x^2 dx \\int_0^2 x^2 dx 其他的积分符号类似 逻辑运算 算式 markdown 描述 \\because \\because 因为 \\therefore \\therefore 所以 \\forall \\forall 任意 $ \\exist $ \\exist 存在 \\vee \\vee 逻辑与 \\wedge \\wedge 逻辑或 \\bigvee \\bigvee 逻辑与 \\bigwedge \\bigwedge 逻辑或 上下标符号 算式 markdown \\bar{a} \\bar{a} \\acute{a} \\acute{a} \\breve{a} \\breve{a} \\grave{a} \\grave{a} \\dot{a} \\dot{a} \\ddot{a} \\ddot{a} \\hat{a} \\hat{a} \\check{a} \\check{a} \\breve{a} \\breve{a} \\tilde{a} \\tilde{a} \\vec{a} \\vec{a} \\overline{a + b + c + d} \\overline{a + b + c + d} \\underline{a + b + c + d} \\underline{a + b + c + d} \\overbrace{a + b + c + d} \\overbrace{a + b + c + d} \\underbrace{a + b + c + d} \\underbrace{a + b + c + d} \\overbrace{a + \\underbrace{b + c}_{1.0} + d}^{2.0} \\overbrace{a + \\underbrace{b + c}_{1.0} + d}^{2.0} 希腊字母 大写 markdown 小写 markdown \\Alpha \\Alpha \\alpha \\alpha \\Beta \\Beta \\beta \\beta \\Gamma \\Gamma \\gamma \\gamma \\Delta \\Delta \\delta \\delta \\Epsilon \\Epsilon \\epsilon \\epsilon \\varepsilon \\varepsilon \\Zeta \\Zeta \\zeta \\zeta \\Eta \\Eta \\eta \\eta \\Theta \\Theta \\theta \\theta \\Iota \\Iota \\iota \\iota \\Kappa \\Kappa \\kappa \\kappa \\Lambda \\Lambda \\lambda \\lambda \\Mu \\Mu \\mu \\mu \\Nu \\Nu \\nu \\nu \\Xi \\Xi \\xi \\xi \\Omicron \\Omicron \\omicron \\omicron \\Pi \\Pi \\pi \\pi \\Rho \\Rho \\rho \\rho \\Sigma \\Sigma \\sigma \\sigma \\Tau \\Tau \\tau \\tau \\Upsilon \\Upsilon \\upsilon \\upsilon \\Phi \\Phi \\phi \\phi \\varphi \\varphi \\Chi \\Chi \\chi \\chi \\Psi \\Psi \\psi \\psi \\Omega \\Omega \\omega \\omega 省略号 算式 markdown 描述 \\dots \\dots 一般用于有下标的序列 \\ldots \\ldots \\cdots \\cdots 纵向位置比\\dots稍高 \\vdots \\vdots 竖向 \\ddots \\ddots 空格 算式 markdown 描述 123\\!123 123!123 空格距离：-3/18 em 123,123 123,123 空格距离：3/18 em 123:123 123:123 空格距离：4/18 em 123 \\ 123 123;123 or 123 \\ 123 空格距离：5/18 em 123\\quad123 123 \\quad 123 空格距离：1 em 123\\qquad123 123 \\qquad 123 空格距离：2 em 上表中的 em 是指当前文本中文本的字体尺寸 其他符号 算式 markdown \\aleph \\aleph \\hbar \\hbar \\imath \\imath \\jmath \\jmath \\ell \\ell \\wp \\wp \\Re \\Re \\Im \\Im \\mho \\mho \\nabla \\nabla \\surd \\surd \\top \\top \\bot \\bot \\neg \\neg \\flat \\flat \\natural \\natural \\sharp \\sharp \\backslash \\backslash \\partial \\partial \\Box \\Box \\clubsuit \\clubsuit \\diamondsuit \\diamondsuit \\heartsuit \\heartsuit \\spadesuit \\spadesuit 分支公式 {% math %} y= \\begin{cases} -x,\\quad x\\leq 0\\\\ x, \\quad x>0 \\end{cases} \\tag{1} {% endmath %} y= \\begin{cases} -x,\\quad x\\leq 0\\\\ x, \\quad x>0 \\end{cases} \\tag{1} 矩阵 不带括号 {% math %} \\begin{matrix} 1 & 2 & 3\\\\ 4 & 5 & 6 \\\\ 7 & 8 & 9 \\end{matrix} \\tag{1} {% endmath %} \\begin{matrix} 1 & 2 & 3\\\\ 4 & 5 & 6 \\\\ 7 & 8 & 9 \\end{matrix} \\tag{1} 括号，left后的括号 可以换为[或{ \\left( \\begin{matrix} 1 & 2 & 3\\\\ 4 & 5 & 6 \\\\ 7 & 8 & 9 \\end{matrix} \\right) \\tag{2} \\left( \\begin{matrix} 1 & 2 & 3\\\\ 4 & 5 & 6 \\\\ 7 & 8 & 9 \\end{matrix} \\right) \\tag{2} 分块矩阵 \\left( \\begin{array}{c|cc} 1 & 0 & 0 \\\\ \\hline -5 & 2 & 3\\\\ \\end{array} \\right) \\left( \\begin{array}{c|cc} 1 & 0 & 0 \\\\ \\hline -5 & 2 & 3\\\\ \\end{array} \\right) 字体与颜色 调整大小 调整大小时，只需要在公式之前添加相应的标识，如 \\Large {% math %} \\Large E=mc^2 {% endmath %} \\Large E=mc^2 取值有Huge、huge、LARGE、Large、large、normalsize(默认)、samll、footnotesize、scriptsize、tiny 粗体斜体 编码 字体 效果 \\rm 罗马体 \\rm E=mc^2 \\it 意大利体(默认) \\it E=mc^2 \\bf 粗体 \\bf E=mc^2 \\boldsymbol 黑体 \\boldsymbol E=mc^2 \\Bbb 黑板粗体 \\Bbb E=mc^2 修改颜色 注意typora里支持，但编译到hexo会有问题 {% math %} P \\left ( x_{l} \\mid y_{l} \\right) = \\frac {P(x_l,y_l)} {P(y_l)} = \\frac { \\textcolor{#FF0000} {P(y_l \\mid x_l)} P(x_l) } {P(y_l)} {% endmath %} 常用颜色： red：红色 green：绿色 blue：蓝色 yellow：黄色 花体字母 \\mathbb{R} \\mathcal{R} \\mathscr{R} \\mathrm{R} \\mathbf{R} \\mathit{R} \\mathsf{R} \\mathtt{R} \\mathfrak{R} \\mathbb{R} \\mathcal{R} \\mathscr{R} \\mathrm{R} \\mathbf{R} \\mathit{R} \\mathsf{R} \\mathtt{R} \\mathfrak{R} Copyright © narutohyc.com 2021 all right reserved，powered by Gitbook该文件修订时间： 2023-09-07 09:09:57 new Valine({el: \"#vcomments\",appId: 'evyLlP61gQN3G3OM2GQq1rzH-gzGzoHsz',appKey: 'utUrzoiqNaDEGlgr09JL1pXB',placeholder: '欢迎留下评论交流~',avatar: 'wavatar',meta: undefined,pageSize: 15,lang: 'zh-CN',recordIP: false}) "},"chapters/2.reinstall_the_system.html":{"url":"chapters/2.reinstall_the_system.html","title":"reinstall_the_system","summary":"重装系统以及一些软件的推荐，包括Chrome插件","keywords":"","body":"重装系统u盘启动盘制作磁盘格式化主板启动热键分区合并工具其他高级用法禁用更新软连接固定ip蓝屏和进不去系统软件安装必装软件进阶软件IT软件内网穿透cpolarstarryfrpnatfrp文件共享Chrome扩展程序翻墙类脚本管理工具扩展脚本下载与推荐下载类效率类程序员类浏览器美化类文件共享局域网ftp共享nfs共享服务部署执行挂载路由桥接水星路由器 重装系统 安装系统不区分windows和linux，方式都是一样的 u盘启动盘制作 百度搜索微软官网工具 下载后，使用管理员身份运行 按步骤操作，其中下载镜像会比较耗时(好像只能下载win10) 制作启动盘完成后，就可以开始安装系统了 百度搜索itellyou，下载系统镜像 下载u盘启动盘制作工具UltraISO，安装后执行 制作启动盘完成后，就可以开始安装系统了 磁盘格式化 以 UEFI 启动的 Windows 磁盘必须是 GPT 格式，这里介绍如何在安装 Windows 期间将磁盘从 MBR 转换成 GPT。 在安装界面按Shift+F10或Fn+Shift+F10进入cmd界面 输入diskpart，进入管理界面 输入list disk查看所有的磁盘情况 磁盘 ### 状态 大小 可用 Dyn Gpt -------- ------------- ------- ------- --- --- 磁盘 0 联机 119 GB 118 GB * 磁盘 1 联机 465 GB 1024 KB 磁盘 2 联机 28 GB 0 B * 选择磁盘select disk 1 注意这里选择的是磁盘，而不是分区！不是通常所说的 C 盘/D 盘，而是一块 SSD，或一块机械硬盘。 执行clean或clean all清除所有数据 操作会清除选中磁盘中的所有数据，是所有数据，毫无保留！ 清除结束，然后敲入 convert gpt 命令完成转换 操作结束之后输入exit切换到 Windows 安装程序继续安装即可 激活工具(点击下载) 主板启动热键 表中没有的机型尝试：ESC、下F8、9、F10、11、F2 台式机品牌 启动按键 笔记本品牌 启动按键 主板品牌 启动按键 联想 F12 联想 F12 华硕 F8 惠普 F12 戴尔 F12 微星 F11 华硕 F8 华硕 ESC 戴尔 ESC 惠普 F9 神舟 F12 联想 F12 有些联想电脑有NOVO键是一键恢复按键。在电脑的侧面有个很小的按钮，旁边有标号——“一个逆时针箭头”，作用是：关机状态下，按此按键可启动联想一键恢复系统或,BIOS，设置程序，或者进入启动菜单 分区合并工具 使用磁盘管理工具合并分区 步骤1. 按Win+R输入diskmgmt.msc并按Enter键打开磁盘管理工具。 步骤2. 在主界面中右键单击与目标分区（C分区）相邻右侧的分区，然后选择“删除卷” 步骤3. 右键单击与刚刚删除产生的未分配空间相邻左侧的目标分区（C分区），然后选择“扩展卷” 步骤4. 在弹出页面中设置您想要扩展的空间量，然后依次单击“下一步”>“完成”即可完成Windows11合并分区任务，轻松将未分配磁盘合并到C盘 使用傲梅分区助手合并分区(推荐) 系统内置的磁盘管理工具想要实现Win11合并分区需求，需要用到扩展卷功能。而扩展卷功能存在限制条件，又需要目标分区右侧相邻处有未分配空间，否则扩展卷选项变灰，无法使用。而对于我们日常工作生活中正常使用的硬盘而言，通常来说是不会出现未分配空间的，因此我们需要删除已有分区来创造未分配磁盘，这会导致分区上的数据丢失，很不友好。那么问题来了，是否有一种分区合并软件能够实现无损合并硬盘分区呢？答案是肯定的。 傲梅分区助手即为符合以上要求的专业磁盘分区管理工具，可以帮助用户轻松合并同一硬盘上处于任意位置的未分配空间，即使没有未分配空间也可以轻松将两个相邻的正在使用的正常分区合并为一个分区，而不需要删除分区，并且兼容性强，在大多数Windows PC和Windows Server操作系统中皆可稳定运行 DiskGenius是一款专业级的 数据恢复软件 ,算法精湛、功能强大,用户群体广泛;支持各种情况下的文件恢复、分区恢复,恢复效果好;文件预览、扇区编辑、加密分区恢复、Ext4分区恢复、RAID恢复等高级功能 其他高级用法 禁用更新 要完全禁止 Win11 更新，您必须使用服务窗口，操作方法如下： 按Win + R打开 RUN 对话框，键入services.msc，然后按Enter 现在，向下滚动并双击Windows Update 如果它正在运行，请单击停止 然后单击启动类型旁边的下拉菜单 选择禁用 单击确定 软连接 mklink命令(需要管理员) 格式：MKLINK [[/D]|[/H]|[/J]] 创建的链接名 源目标地址 /d 给目录创建符号链接，简称符号链接、软链接 /h 创建硬链接，简称硬链接 /j 给目录创建联接点，简称软链接 例子：创建目录软连接到指定目录 mklink /j \"D:\\壁纸\" \"S:\\实际壁纸文件夹\" 类型 能否链接到文件 能否链接到目录 能否跨磁盘 能否指向不存在的目标 能否指向相对目录 如何删除 快捷方式 能 能 能 能 否 del file 硬链接 能 否 否 否 否 del file 软链接 否 能 能 能 否 rd folder 符号链接 能 能 能 能 能 rd folder or del file 固定ip 自动获取ip @echo //-=-=-=-=-=-=-=-=-=-=-=-=-=-= @echo // 【自动获取】 @echo // 设置IP，子网掩码，网关 @echo //-=-=-=-=-=-=-=-=-=-=-=-=-=-= %1 mshta vbscript:CreateObject(\"Shell.Application\").ShellExecute(\"cmd.exe\",\"/c %~s0 ::\",\"\",\"runas\",1)(window.close)&&exit cd /d \"%~dp0\" netsh interface ip set address name=\"WLAN\" source=dhcp @echo //-=-=-=-=-=-=-=-=-=-=-=-=-=-= @echo // 设置DNS @echo //-=-=-=-=-=-=-=-=-=-=-=-=-=-= netsh interface ip set dns name = \"WLAN\" static addr = none @echo // 自动获取IP设置完成！ @pause 固定指定ip @echo //-=-=-=-=-=-=-=-=-=-=-=-=-=-= @echo // 【固定设置】 @echo // 设置IP，子网掩码，网关 @echo //-=-=-=-=-=-=-=-=-=-=-=-=-=-= %1 mshta vbscript:CreateObject(\"Shell.Application\").ShellExecute(\"cmd.exe\",\"/c %~s0 ::\",\"\",\"runas\",1)(window.close)&&exit cd /d \"%~dp0\" netsh interface ip set address name=\"WLAN\" source=static addr=192.168.0.16 mask=255.255.255.0 gateway=192.168.0.1 @echo //-=-=-=-=-=-=-=-=-=-=-=-=-=-= @echo // 设置DNS @echo //-=-=-=-=-=-=-=-=-=-=-=-=-=-= netsh interface ip set dns \"WLAN\" static 192.168.0.1 primary netsh interface ip add dns \"WLAN\" 192.168.0.1 @echo // 固定IP设置完成！ @pause 这里的addr是你要固定的ip，mask是掩码，gateway是网关，还有DNS，这三个参考图形化界面标签下适配器ip详细情况查询 打开网络适配器，右键查看适配器ip详细情况 将ip对应的地址、掩码和网关填下在自定义的IP地址下(注意这里只能固定IP的最后一位，不知道为什么，也就是前三位地址不能变) 蓝屏和进不去系统 如果您的计算机出现蓝屏并且无法进入系统，或者系统一直在启动循环中转圈，这可能是由于多种原因引起的。以下是一些常见的解决方法： 安全模式启动：尝试进入安全模式来解决问题。重启计算机，在引导过程中按下F8键（或适用于您的计算机的其他功能键），然后选择\"安全模式\"。安全模式会以最小的驱动程序和服务启动系统，有助于排除可能导致问题的驱动程序或软件。 系统还原：如果您的计算机之前正常工作，您可以尝试使用系统还原将系统恢复到之前的工作状态。在安全模式下，打开\"控制面板\"，找到\"系统和安全\"或\"系统\"选项，然后选择\"系统保护\"。在系统保护选项卡中，选择\"系统还原\"，按照提示选择之前的还原点并执行还原过程。 修复启动：使用Windows安装媒体或恢复分区，您可以尝试修复启动问题。插入Windows安装媒体（例如安装光盘或USB驱动器），重新启动计算机并从安装媒体引导。选择\"修复您的计算机\"或类似选项，然后按照屏幕上的指示选择\"启动修复\"或\"自动修复\"。 检查硬件问题：硬件问题（如内存故障或硬盘问题）也可能导致系统无法启动。您可以尝试以下步骤来排除硬件问题： 检查内存：打开计算机并重新安装内存模块，或尝试使用一条已知工作的内存模块进行测试。 检查硬盘：确保硬盘连接正常，并尝试使用硬盘测试工具来检查硬盘的健康状况。 专业技术支持：如果上述方法无法解决问题，您可能需要寻求专业的技术支持。联系计算机制造商或技术支持专家，他们可以提供更进一步的帮助和指导。 请注意，以上方法可能因具体情况而异。在尝试任何解决方法之前，请确保您了解可能产生的影响，并在可能的情况下备份重要数据。 某些操作系统（如Windows）在连续发生启动问题时，可能会尝试自动修复。通过连续开关机三次，系统可能会检测到启动异常，并尝试自动修复启动问题，此时进去后就能选到安全模式启动了 个人实际操作，当您的计算机出现问题时，可以按照以下有条理的步骤进行故障排除和修复： 尝试安全模式： 重启计算机，并在引导过程中按下F8键或适用于您的计算机的其他功能键 选择\"安全模式\"以最小的驱动程序和服务启动系统 进入安全模式后，进行以下操作： 运行杀毒软件扫描以检查恶意软件或病毒 卸载最近安装的软件，特别是与问题发生时间相关的软件 检查系统日志或事件查看器，以了解是否有任何错误或警告提示 自动修复启动：如果安全模式无法解决问题，您可以尝试自动修复启动 连续开关机三次，以触发自动修复启动 操作系统会尝试自动修复启动问题，如修复损坏的启动文件或配置 卸载最新的更新：如果自动修复启动失败或问题仍然存在，您可以考虑卸载最近的功能更新或质量更新 进入计算机的控制面板或设置 寻找\"程序和功能\"或\"应用和功能\"选项 选择\"安装的更新\"或\"更新历史记录\" 卸载最近安装的功能更新或质量更新 重置电脑：如果问题仍然存在，最后的选择是重置电脑 进入计算机的设置或恢复选项 找到\"恢复\"或\"重置此电脑\"选项 根据提示选择重置选项。您可以选择保留个人文件或完全恢复出厂设置 请注意，重置电脑将清除所有个人文件和安装的软件，需要重新安装您需要的软件 手动重装系统：如果以上方法都无法解决问题，最后一步是手动重装操作系统 获取适用于您的操作系统的安装媒体 启动计算机并从安装媒体引导 按照屏幕上的指示进行操作系统的重新安装 请注意，在执行这些步骤之前，请务必备份重要的数据。如果您不确定如何操作或遇到困难，请考虑寻求专业技术支持或咨询设备制造商的支持 软件安装 必装软件 微软Office 办公软件是指可以进行文字处理、表格制作、幻灯片制作、图形图像处理、简单数据库的处理等方面工作的软件。 办公软件朝着操作简单化，功能细化等方向发展。链接下载(点我下载2016版) 删除软件IOBit IObit Uninstaller最新版是款功能高效的卸载工具。IObit Uninstaller官方版可轻松卸载并消除您电脑中的所有程序及文件，并在卸载后极速搜索注册表，找出残余信息并删除。并且IObit Uninstaller中还有一键移除工具列，批次移除和强制移除等功能。点我下载 chrome浏览器 百度搜索chrome浏览器，下载最新版本安装即可 可牛看图 一个功能强大且体积小巧的电脑看图工具，拥有丰富多样的图片浏览方式以及炫酷动感3D图片墙，支持批量图片上传、支持图片批量下载(官网下载，微云下载) 极速PDF阅读器 极速PDF阅读器(点我下载)是一款闪电般好用的PDF阅读器,体积小、启动速度快,十分轻巧且占用内存极少;提供单页、书本模式个性阅读,又有全屏、幻灯片等功能 布谷鸟配音(收费) 布谷鸟配音(点我下载)提供一站式智能配音的专业工具，输入文字转语音，一键将文字合成语音，真人情感配音 重启还原(免费版、专业版) 重启还原点我下载是一款不影响电脑性能，不占CPU使用率的还原工具，真正做到零内存占用，全程使用无感知，进入虚拟系统速度和普通系统速度相差无几 进阶软件 效率三件套 AnyTXT Searcher(点我下载)是一款免费的功能强大的本地文档和文本搜索应用程序,就像本地磁盘谷歌搜索引擎,速度比Windows 搜索快得多,是您理想的桌面文件内容全文搜索引擎[搜文件内容] Everything(点我下载)是voidtools开发的一款文件搜索工具，它体积小巧，界面简洁易用，快速建立索引，快速搜索，同时占用极低的系统资源，实时跟踪文件变化，并且还可以通过http或ftp形式分享搜索[搜文件] uTools(点我下载)是一个极简、插件化、跨平台的现代化桌面软件。通过自由选配丰富的插件,打造你得心应手的工具集合。 当你熟悉它后,能够为你节约大量时间,让你可以更加专注地改变世界[搜软件和插件] Treesize TreeSize Pro是一款优秀的磁盘空间管理工具。凭借其多样化的功能深受用户喜爱。通过该软件能够有效管理和清理磁盘空间，可视化磁盘空间的使用情况，详细分析目录级别，显示目录大小，包括所有子目录，直观呈现为饼图或条形状，所有信息一目了然(官网-需要自己找注册码、百度云下载-提取码: wqd1) visio Microsoft Visio是Windows 操作系统下运行的流程图软件，它现在是Microsoft Office软件的一个部分。 Visio可以制作的图表范围十分广泛，有些人利用Visio的强大绘图功能绘制地图、企业标志等，同时Visio支持将文件保存为svg、dwg等矢量图形通用格式，因此受到广泛欢迎。链接下载(点我下载2016版) Gow Gow(点我下载)是一个轻量级的Cygwin替代软件，它能做的事情是给Liunx软件提供一个Windows系统上的运行环境 安装后可以直接在windows上执行linux的大部分命令 Vmware VMware Workstation Pro 点我下载是行业标准桌面 Hypervisor，使用它可在 Windows 或 Linux 桌面上运行 Windows、Linux 和 BSD 虚拟机。激活码全家桶，历史版本下载将上面的Name项内容，拼接到下面链接后面 https://download3.vmware.com/software/wkst/file/，复制到浏览器下载，例如: https://download3.vmware.com/software/wkst/file/VMware-workstation-full-16.2.1-18811642.exe typora Typora(点我下载)是一款跨平台的Markdown编辑器软件,拥有Windows、macOS客户端 neatreader Neat Reader(点我下载)率先在业界实现了主流平台的全面支持，让你无需再在各个软件间来回切换，真正实现了无拘无束，随时随地阅读体验，致力于打造一个满足现代需求的 EPUB/TXT 阅读器 PandaOCR PandaOCR(普通版，专业版)是一款专注于 Windows 桌面端 OCR 文字识别的免费软件，支持多功能 OCR 识别、即时翻译和朗读等。而且识别和翻译等引擎都是可以自由调换的，界面简洁，使用起来也很方便 PandaOCR.Pro同样是免费使用，但它有一个激活专业版本状态，在未激活状态下您可以使用除高级功能外的全部功能，同时识别或翻译等功能可使用演示接口和百度API版接口，普通使用基本足够 IT软件 git git官网下载 git config --global user.name \"narutohyc\" git config --global user.mail \"1832044043@qq.com\" # 配置远程仓库 将pub_key黏贴到git ssh-keygen -t rsa -C \"1832044043@qq.com\" 如果需要指定的文件名，可以在ssh-keygen -t rsa -C \"xxxxxxxxx@xx.com\"命令后输入自己的名字 (如: /root/.ssh/hyc_github) 但是 ssh 命令默认只会读取id_rsa这个私钥文件，所以如果是其它的名字需要添加配置文件，这里新建一个配置文件 touch ~/.ssh/config vi ~/.ssh/config 输入以下内容 Host www.github.com IdentityFile /root/.ssh/hyc_github Host www.gitlab.com IdentityFile C:\\Users\\hyc\\.ssh\\gitlab_id_rsa ps: 这里建议github的key直接默认名字(因为换名字的话，后面配置有点难，我没试成功，测试命令ssh -T git@github.com)，其他key的可以换个名字 比如ssh-keygen -t rsa -C \"huangyc@gitlab.com.cn\"，名字输入gitlab_id_rsa，然后在config里配置 Host www.gitlab.com IdentityFile C:\\Users\\hyc\\.ssh\\gitlab_id_rsa TortoiseGit(海龟 Git)是TortoiseSVN的 Git 版本，用于迁移 TortoiseSVN 到TortoiseGit，TortoiseGit 是一个 Git 版本控制客户端，作为 Microsoft Windows 的外壳扩展实现，配置教程 安装TortoiseGit 安装语言包 执行PuTTYgen，生成密钥 保存公钥和密钥 公钥配置到git 打开 Pageant，添加公钥(设置开机自动启动并加载密钥) 按win + r 打开windows的运行命令框，输入shell:startup，会打开windows开机启动的文件夹，里面放的所有exe程序就会开机启动 找到pageant.exe文件，鼠标右键新建快捷方式或发送到桌面快捷方式 复制到启动文件夹，右键属性，修改目标为\"C:\\Program Files\\TortoiseGit\\bin\\pageant.exe\" \"C:\\Users\\.ssh\\github_tor.ppk\" tortoisegit 常见错误：disconnected no supported authentication methods available(server sent: publickey) 多半是因为git和小乌龟有冲突，解决方法：右键--小乌龟---settings--network--修改ssh client为git的ssh.exe git的ssh.exe在Git\\usr\\bin\\ssh.exe下 或者是打开编辑本地git/config(L),添加puttykeyfile [remote \"origin\"] url = git@github.com:hycBook/hycBlog.git fetch = +refs/heads/*:refs/remotes/origin/* puttykeyfile = C:\\\\Users\\\\hyc\\\\.ssh\\\\tor_pri.ppk jdk 官网下载，jdk1.8官网地址主要配置参考 export JAVA_HOME=/usr/java/jdk1.8.0_241-amd64 export JRE_HOME=/usr/java/jdk1.8.0_241-amd64/jre export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin export CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JRE_HOME/lib pycharm 官网下载，IDE全家桶激活码，验证码输入lookdiv.com navicat 提供简便的管理方法，设计和操作MySQL、MariaDB、SQL Server、Oracle、PostgreSQL和SQLite的数据(点我下载-提取码: 6sp9) Power Designer 是Sybase公司的CASE工具集，使用它可以方便地对管理信息系统进行分析设计，它几乎包括了数据库模型设计的全过程。利用PowerDesigner可以制作数据流程图、概念数据模型(ConceptualDataModel)、物理数据模型(PhysicalDataModel)，还可以为数据仓库制作结构模型，也能对团队设计模型进行控制。(官网-需要自己找注册码、百度云下载-提取码: n3xz) finalshell 免费的国产的集 SSH 工具、服务器管理、远程桌面加速的良心软件，同时支持 Windows，macOS，Linux，它不单单是一个 SSH 工具，完整的说法应该叫一体化的服务器，网络管理软件，在很大程度上可以免费替代 XShell，是国产中不多见的良心产品，具有免费海外服务器远程桌面加速，ssh 加速，双边 tcp 加速，内网穿透等特色功能(点我下载) Officebox 完全免费的PDF工具/万能格式转换/识别工具/图片处理，多达60+个小工具，提供绿色版(点我下载) Wolfram Mathematica 一款数学计算软件，具有编程语言、文本系统、计算引擎、图形系统等多种特色功能，并且还完美支持支持高性能计算，让用户科学计算的过程中，充分的发挥出自身的优势等。可以用于画函数图像(点我下载-提取码: 52qa) 内网穿透 cpolar 速度一般，官网网址 操作简单，直接执行命令启动 特点： 随机URL/端口上的HTTP/TCP隧道 1个在线cpolar进程 4个隧道/cpoloar进程 40个连接数/分钟 每次地址会一直变 starryfrp 星空内网穿透，官网网址 免费版 通过签到可以随机获得 1 ~ 10 GiB 流量 5 条隧道（实名后赠送 5 条可用隧道数） 8Mbps 限速(实际下载速度 200k左右) 每日签到获取 1 ~ 5 GiB 随机流量 支持 TCP/UDP/HTTP/HTTPS/STCP 隧道 大带宽版 ￥10 /月 15 条隧道 10Mbps 限速 每日签到获取 1 ~ 5 GiB 随机流量 支持 TCP/UDP/HTTP/HTTPS/STCP 隧道 解锁VIP节点 natfrp 樱花内网穿透，官网网址 10Mbps (速度快 流量消耗挺快的) 普通用户 完全免费 隧道限速 10 Mibps 隧道数量 2 条 每月流量 5 GiB 解锁节点 普通节点 青铜VIP ￥68 ￥10 / 月 隧道限速 24 Mibps 隧道数量 10 条 每月流量 5 GiB + 66 GiB 解锁节点 + VIP节点 文件共享 下载客户端(点我下载)，查看python源码文件，可以依据自己的需求修改 使用方法： 将noup_server_pig.exe放在需要共享的目录下，双击启动就好，默认端口为8282 如果需要修改端口或文件夹时，可以通过以下命令执行 noup_server_pig.exe --port 8282 -d S:\\ port表示开放的端口，默认为8282 d表示是共享的文件夹，默认为H盘 端口开放，没有开放端口的话，其他设备是无法访问你的(注意到这一步，只能在局域网内访问) windows：命令行打开输入Firewall.cpl，打开高级设置 点击入站规则后再新建规则 最后输入名称就可以开放8282端口了 如果开放后没有效果，直接关闭防火墙试试 内网穿透 为了让局域网外的设备访问到，需要安装内网穿透软件，可以参考上文的软件安装部分 至此完成文件共享 Chrome扩展程序 没有插件的浏览器无异于没有灵魂！以下扩展程序的离线包微云下载 插件下载地址 crx4chrome: 下载指定扩展id的crx文件 extfans huajiakeji crxdown 应用商店 翻墙类 Astar VPN Astar VPN- 适合所有人的免费且快速的 VPN Ghelper 官网需要翻墙 脚本管理工具 扩展 油猴Tampermonkey 暴力猴Violentmonkey 脚本下载与推荐 脚本下载地址 openuserjs greasyfork 脚本推荐 百度网盘直接下载助手 网盘直链下载助手 解锁B站大会员番剧、B站视频解析下载；全网VIP视频免费破解去广告；全网音乐直接下载；油管、Facebook等国外视频解析下载；网盘搜索引擎破解无限下载等 破解VIP会员视频集合 下载类 Chrono下载管理器: 做Chrome浏览器中最好的下载管理器 nternet Download Manager: 您可以使用Internet下载管理器下载 Stream Recorder: 可以下载99%在线视频，包括直播流、m3u8流 Fatkun图片批量下载: 可以下载当前标签或者是所有标签的图片，提供按分辨率、链接等筛选图片 效率类 书签管理: 在任何页面都可以通过书签关键字快速搜索打开书签,管理您的书签 书签地球助手: 一款很优秀好用的网页浏览器上的书签管理助手，帮助用户一键整理网页标签，自定义标签设置方法，同时还可以查询搜索历史记录 广告拦截 AdGuard 广告拦截器是一款无与伦比的广告拦截扩展，用以对抗各式广告与弹窗。可以拦截 Facebook、YouTube 和其它所有网站的广告 广告终结者能清除网页上的所有广告：浮动广告，购物广告，恶意弹窗，跟踪代码。让你浏览网页更快更清爽 扩展管理器(Extension Manager): 一键管理所有扩展，快速开启/禁用、批量闪电管理，智能排序，右键卸载、锁定、选项配置，角标提醒，大小布局随心配。快捷、简单、安全 Simple Allow Copy: 简易复制 Reader View: 剥离按钮、背景图像等杂物，改变页面的文字大小、对比度和布局，以提高可读性 Diigo Web Collector - Capture and Annotate: 用来在网页上做笔记，高亮显示选中的文本，就像在本子上勾画重点一样(需要登录使用，免费版支持100个网页) 在线合并PDF: 快速免费合并PDF文件！ Diigo Web Collector: 像在本子上一样为网页做笔记 Docs Online Viewer: 直接在谷歌浏览器中在线查看任何文件 Instapaper: 是一款运行在chromr内核的能够即时保存网页的chrome网页离线阅读插件 Mate Translate: 是一款词典翻译类插件，可轻松翻译 103 种语言的单词、短语或文件。 功能包含 [全页翻译]: 只要单击鼠标，Mate 就会为您翻译整个网页！在任何页面上，只要使用上下文菜单中的“翻译此页面”功能，就可立即翻译为您想要的语言 Video Downloader professional: 是一款网页视频下载工具，下载前请先播放视频 FireShot: 不仅支持区域截图，还支持完整的长网页截图 Grammarly for Chrome: 国外最火的文字纠错工具，英语写作助手，帮助你在输出过程中找出英语单词拼写、语法、语调等问题，它为你提供具体的建议，帮助你提高英语写作水平 程序员类 Octotree - GitHub code tree Postman Interceptor Sourcegraph GitZip for github JSON Viewer Pro 浏览器美化类 MONKNOW 新标签页 - 个性化面板 Stylish-为任意网站自定义主题: 利用用户样式管理器Stylish来重新编辑网站的样式，可利用Stylish为许多网站安装主题和皮肤，也可创建自己的主题和皮肤 文件共享 局域网ftp共享 centos7.6下搭建NFS共享并挂载到windows客户端-网络错误53解决方法 FTP(File Transfer Protocol)是TCP/IP网络上两台计算机传送文件的协议，使得主机间可以共享文件 目前有很多软件都能实现这一功能，然而windows 8系统自带的IIS就可以帮助你搭建FTP服务器 打开控制面板 -> 程序 -> 启用或关闭windows功能 找到Internet信息服务，并选中FTP服务、FTP扩展性和IIS管理控制台前的复选框，点击确定 打开IIS管理器，在左栏的网站上点击右键，打开添加FTP站点 win+r后输入inetmgr，即可打开IIS管理器 开始配置，选择无SSL 在电脑浏览器地址栏中输入ftp://本机ip测试一下 在启动你的FTP服务器时建议关闭防火墙 常见问题 本机可以访问，其他机子无法访问，可能是防火墙问题或ftp服务权限问题 方式一: 关闭防火墙 方式二(推荐): 允许FTP服务通过防火墙 关闭被动FTP 将文件复制到ftp服务器出错，请检查是否有权限将文件放到该服务器上 win+r后输入inetmgr，打开IIS管理器，进入服务器管理器，单击右侧的[高级设置]选项，进入FTP高级设置对话框，在高级设置对话框中找到允许 UTF-8选项，单击下拉列，然后选择False选项，重启服务即可 nfs共享 服务部署 准备工作 概述：NFS是一种基于TCP/IP传输的网络文件系统协议，最初由SUN公司开发。通过NFS协议，客户机可以像访问本地目录一样访问远程服务器中的共享资源。NFS得到了如NAS等网络存储的设备极好支持。也是LVS共享存储的首选。 这里用centos7环境演示 服务端安装nfs-utils、rcpbind软件包 yum -y install nfs-utils rpcbind 配置nfs协议，设置各种*port=...参数 vi /etc/sysconfig/nfs 共享目录创建，并修改权限： mkdir /home/hyc chmod 777 /home/hyc 配置nas，打开配置文件：/etc/exports /home/hyc 10.xx.xx.xx/22(rw,sync,no_root_squash,no_all_squash) /home/hyc 192.xx.xx.xx/22(rw,sync,no_root_squash,no_all_squash) 重新加载NFS配置 exportfs -r /etc/exports参数说明 rw：可读写的权限 ro：只读的权限 anonuid：可以自行设定这个UID的值，这个UID必需要存在于你的/etc/passwd当中 anongid：同anonuid，但是变成groupID就是了 sync：资料同步写入到内存与硬盘当中 async：资料会先暂存于内存当中，而非直接写入硬盘 insecure：允许从这台机器过来的非授权访问 no_root_squash：登入NFS主机，使用该共享目录时相当于该目录的拥有者 如果是root的话，那么对于这个共享的目录来说，他就具有root的权限，这个参数『极不安全』，不建议使用 root_squash：登入NFS主机，使用该共享目录时相当于该目录的拥有者 但是如果是以root身份使用这个共享目录的时候，那么这个使用者（root）的权限将被压缩成为匿名使用者，即通常他的UID与GID都会变成nobody那个身份 all_squash：不论登入NFS的使用者身份为何，他的身份都会被压缩成为匿名使用者，通常也就是nobody 启动服务 # 启动服务 systemctl start rpcbind systemctl start nfs # 设置开机启动 systemctl enable rpcbind systemctl enable nfs 查看端口占用，以便开着防火墙的时候设置 rpcinfo -p 查看本机共享目录 [root@uslave02 hyc]# showmount -e 192.xx.xx.23 Export list for 192.xx.xx.23: /home/hyc 10.xx.xx.xx/22,192.xx.xx.xx/22 以下操作需要打开启用或关闭windows功能，勾选NFS客户端和管理工具，然后确定 安装nfs服务 首先需要到官网下载hanewin，我这里用的是NFS Server 1.2.64 安装完毕后来到安装目录，以管理员身份执行firewall.bat添加防火墙规则 打开防火墙，检查入站规则中有没有hanewin 开头的这两项，若没有请检查上一步 或者自己添加端口号，参考上文`局域网ftp共享，自己的话就是添加111、1058和2049这三个端口 右键以管理员模式运行桌面的nfs server快捷方式 点击左上角edit -> preferences 如图设置 再打开Edit -> Preferences -> Exports -> Edit exports file设置共享磁盘路径，根据自己的情况来，比如共享/H 执行挂载 开始挂载 mkdir /mnt/data chmod 777 /mnt/data mount -t nfs 192.xx.xx.23:/home/hyc /mnt/data 取消挂载 unmount /mnt/data 用这种方式挂载centos的nfs服务，好像会卡死，一直在刷新，导致资源管理器无响应 启用或关闭windows功能下，勾选NFS客户端和管理工具，然后确定 在我的电脑下，选择映射网路驱动器，添加\\\\192.xx.xx.23\\home\\hyc即可 # 挂载 C:\\Users\\Administrator>mount 192.xx.xx.xx:/home/hyc Z: Z: 现已成功连接到 192.xx.xx.xx:/home/hyc 命令已成功完成。 # 取消挂载 C:\\Users\\Administrator>umount Z: 路由桥接 在面积较大的环境(如别墅、写字间等)，路由器无线覆盖范围有限，部分区域信号较弱到或存在信号盲点 无线WDS桥接功能可以扩展无线覆盖范围，实现信号增强、移动漫游的需求 主路由器与副路由器通过无线WDS桥接，无线终端可连接副路由器上网，移动过程中自动切换，实现漫游 水星路由器 去登陆http://melogin.cn/，然后选择无线设置下的WDS无线桥接，再选择源路由器的wifi，输入密码连接即可 如果桥接后无法上网，尝试关闭DHCP选择 Copyright © narutohyc.com 2021 all right reserved，powered by Gitbook该文件修订时间： 2023-09-07 09:09:57 new Valine({el: \"#vcomments\",appId: 'evyLlP61gQN3G3OM2GQq1rzH-gzGzoHsz',appKey: 'utUrzoiqNaDEGlgr09JL1pXB',placeholder: '欢迎留下评论交流~',avatar: 'wavatar',meta: undefined,pageSize: 15,lang: 'zh-CN',recordIP: false}) "}}